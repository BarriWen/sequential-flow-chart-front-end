{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { ComponentType } from '../../definition';\r\nimport { JoinView } from '../common-views/join-view';\r\nimport { StepComponentFactory } from '../step-component-factory';\r\nconst PH_WIDTH = 100;\r\nconst PH_HEIGHT = 120;\r\nconst SIZE = 30;\r\nfunction addStop() {\r\n    const s = SIZE * 0.5;\r\n    const m = (SIZE - s) / 2;\r\n    const circle = Dom.svg('circle', {\r\n        class: 'sqd-start-stop',\r\n        cx: SIZE / 2,\r\n        cy: SIZE / 2,\r\n        r: SIZE / 2\r\n    });\r\n    const g = Dom.svg('g', { class: 'stop' });\r\n    g.appendChild(circle);\r\n    const stop = Dom.svg('rect', {\r\n        class: 'sqd-start-stop-icon',\r\n        x: m,\r\n        y: m,\r\n        width: s,\r\n        height: s,\r\n        rx: 4,\r\n        ry: 4\r\n    });\r\n    g.appendChild(stop);\r\n    return g;\r\n}\r\nexport class SequenceComponentView {\r\n    constructor(g, width, height, joinX, placeholders, components) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.placeholders = placeholders;\r\n        this.components = components;\r\n    }\r\n    static create(parent, sequence, configuration) {\r\n        const g = Dom.svg('g');\r\n        parent.appendChild(g);\r\n        const components = sequence.map(s => StepComponentFactory.create(g, s, sequence, configuration));\r\n        const maxJoinX = components.length > 0 ? Math.max(...components.map(c => c.view.joinX)) : PH_WIDTH / 2;\r\n        const maxWidth = components.length > 0 ? Math.max(...components.map(c => c.view.width)) : PH_WIDTH;\r\n        let offsetY = PH_HEIGHT;\r\n        const placeholders = [];\r\n        // Empty canvas\r\n        if (components.length == 0) {\r\n            placeholders.push(appendPlaceholder(g, maxJoinX - PH_WIDTH / 2, 0));\r\n        }\r\n        // Adding lines, placeholders, and stop points on TOP of components\r\n        let i = 0;\r\n        for (i; i < components.length; i++) {\r\n            const component = components[i];\r\n            const offsetX = maxJoinX - component.view.joinX;\r\n            JoinView.createStraightJoin(g, new Vector(maxJoinX, offsetY - PH_HEIGHT), PH_HEIGHT);\r\n            placeholders.push(appendPlaceholder(g, maxJoinX - PH_WIDTH / 2, offsetY - PH_HEIGHT));\r\n            Dom.translate(component.view.g, offsetX, offsetY);\r\n            offsetY += component.view.height + PH_HEIGHT;\r\n        }\r\n        /* Add placeholder & stop sign to the BOTTOM of last component\r\n        if it's not a switch component */\r\n        if (i > 0 && components[i - 1].step.componentType == ComponentType.task) {\r\n            JoinView.createStraightJoin(g, new Vector(maxJoinX, offsetY - PH_HEIGHT), PH_HEIGHT);\r\n            placeholders.push(appendPlaceholder(g, maxJoinX - PH_WIDTH / 2, offsetY - PH_HEIGHT));\r\n            // Add stop sign to task block\r\n            const stop = addStop();\r\n            Dom.translate(stop, maxJoinX - PH_WIDTH / 6.8, offsetY - PH_HEIGHT / 16);\r\n            // Calculate location\r\n            g.appendChild(stop);\r\n        }\r\n        let containsSwitch;\r\n        for (i = 0; i < components.length; i++) {\r\n            // Modify switch components\r\n            if (components[i].step.componentType == ComponentType.switch) {\r\n                JoinView.createStraightJoin(g, new Vector(maxJoinX, 0), PH_HEIGHT);\r\n                containsSwitch = 1;\r\n                // If there is one or more blocks below if/else,\r\n                // move them to the end of true branch\r\n                while (components[i + 1]) {\r\n                    // Move every block to true branch\r\n                    components[i].step.branches.True.push(components[i].parentSequence[i + 1]);\r\n                    // Remove from parent sequence of if/else & components\r\n                    components[i].parentSequence.splice(i + 1, 1);\r\n                    components.splice(i + 1, 1);\r\n                }\r\n            }\r\n        }\r\n        // Hide start component, and placeholder & line below it\r\n        //if (components.length > 0 && components[0].step.id == 'start-component') {\r\n        if (components.length > 0 && components[0].step.id.startsWith('start-component')) {\r\n            Dom.attrs(placeholders[0], {\r\n                display: 'none'\r\n            });\r\n            const lines = parent.childNodes[0].childNodes;\r\n            if (components.length == 1) {\r\n                parent.childNodes[0].removeChild(lines[1]);\r\n            }\r\n            else {\r\n                // console.log(lines);\r\n                parent.childNodes[0].removeChild(lines[components.length]);\r\n                if (containsSwitch) {\r\n                    parent.childNodes[0].removeChild(lines[0]);\r\n                }\r\n            }\r\n            // console.log(document.getElementsByClassName(\"sqd-input\")[0]);\r\n            document.getElementsByClassName(\"sqd-input\")[0].setAttribute(\"display\", \"none\");\r\n        }\r\n        return new SequenceComponentView(g, maxWidth, offsetY, maxJoinX, placeholders, components);\r\n    }\r\n    getClientPosition() {\r\n        throw new Error('Not supported');\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.placeholders.forEach(p => {\r\n            Dom.attrs(p, {\r\n                visibility: isDragging ? 'visible' : 'hidden'\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction appendPlaceholder(g, x, y) {\r\n    const g1 = Dom.svg('g', {\r\n        class: 'sqd-placeholder',\r\n        visibility: 'hidden'\r\n    });\r\n    const circle = Dom.svg('circle', {\r\n        class: 'sqd-placeholder-circle',\r\n        cx: x + PH_WIDTH / 2,\r\n        cy: y + PH_HEIGHT / 2,\r\n        r: SIZE / 3,\r\n    });\r\n    const startX = x + PH_WIDTH / 2 - SIZE / 8;\r\n    const startY = y + PH_HEIGHT / 2 - SIZE / 8;\r\n    const endX = x + PH_WIDTH / 2 + SIZE / 8;\r\n    const endY = y + PH_HEIGHT / 2 + SIZE / 8;\r\n    const sign = Dom.svg('path', {\r\n        class: 'sqd-placeholder-icon',\r\n        d: `M ${startX} ${y + PH_HEIGHT / 2} H ${endX} M ${x + PH_WIDTH / 2} ${startY} V ${endY}`\r\n    });\r\n    // Outside circle\r\n    const outside = Dom.svg('circle', {\r\n        id: 'outside-circle',\r\n        cx: x + PH_WIDTH / 2,\r\n        cy: y + PH_HEIGHT / 2,\r\n        r: SIZE,\r\n    });\r\n    Dom.toggleClass(outside, true, 'sqd-hidden');\r\n    g1.appendChild(outside);\r\n    g1.appendChild(circle);\r\n    g1.appendChild(sign);\r\n    g.appendChild(g1);\r\n    return g1;\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/join-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/step-component-factory.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/sequence/sequence-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { Sequence } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { Component, ComponentView } from '../component';\r\nexport declare class SequenceComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly placeholders: SVGElement[];\r\n    readonly components: Component[];\r\n    static create(parent: SVGElement, sequence: Sequence, configuration: StepsConfiguration): SequenceComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    setIsDragging(isDragging: boolean): void;\r\n}\r\n"}}
