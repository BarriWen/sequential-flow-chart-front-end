{"code":"import { DragStepBehavior } from '../behaviors/drag-step-behavior';\r\nimport { readMousePosition, readTouchPosition } from '../core/event-readers';\r\nimport { ObjectCloner } from '../core/object-cloner';\r\nimport { TypeValidator } from '../core/type-validator';\r\nimport { Uid } from '../core/uid';\r\nimport { ToolboxItemView } from './toolbox-item-view';\r\nexport class ToolboxItem {\r\n    constructor(step, context) {\r\n        this.step = step;\r\n        this.context = context;\r\n    }\r\n    static create(parent, step, context) {\r\n        TypeValidator.validate(step.type);\r\n        const view = ToolboxItemView.create(parent, step, context.configuration.steps);\r\n        const item = new ToolboxItem(step, context);\r\n        view.bindMousedown(e => item.onMousedown(e));\r\n        view.bindTouchstart(e => item.onTouchstart(e));\r\n        view.bindContextMenu(e => item.onContextMenu(e));\r\n        return item;\r\n    }\r\n    onTouchstart(e) {\r\n        e.preventDefault();\r\n        if (e.touches.length === 1) {\r\n            e.stopPropagation();\r\n            this.startDrag(readTouchPosition(e));\r\n        }\r\n    }\r\n    onMousedown(e) {\r\n        e.stopPropagation();\r\n        const isPrimaryButton = e.button === 0;\r\n        if (isPrimaryButton) {\r\n            this.startDrag(readMousePosition(e));\r\n        }\r\n    }\r\n    onContextMenu(e) {\r\n        e.preventDefault();\r\n    }\r\n    startDrag(position) {\r\n        if (!this.context.isReadonly) {\r\n            const newStep = createStep(this.step);\r\n            this.context.behaviorController.start(position, DragStepBehavior.create(this.context, newStep));\r\n        }\r\n    }\r\n}\r\nfunction createStep(step) {\r\n    const newStep = ObjectCloner.deepClone(step);\r\n    newStep.id = Uid.next();\r\n    return newStep;\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/drag-step-behavior.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/event-readers.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/object-cloner.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/type-validator.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/uid.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/toolbox-item-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/toolbox/toolbox-item.d.ts","writeByteOrderMark":false,"text":"import { StepDefinition } from '../designer-configuration';\r\nimport { DesignerContext } from '../designer-context';\r\nexport declare class ToolboxItem {\r\n    private readonly step;\r\n    private readonly context;\r\n    static create(parent: HTMLElement, step: StepDefinition, context: DesignerContext): ToolboxItem;\r\n    private constructor();\r\n    private onTouchstart;\r\n    private onMousedown;\r\n    private onContextMenu;\r\n    private startDrag;\r\n}\r\n"}}
