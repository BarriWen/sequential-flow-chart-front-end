{"code":"import { ControlBarView } from './control-bar-view';\r\nexport class ControlBar {\r\n    constructor(view, context) {\r\n        this.view = view;\r\n        this.context = context;\r\n    }\r\n    static create(parent, context) {\r\n        const view = ControlBarView.create(parent);\r\n        const bar = new ControlBar(view, context);\r\n        view.bindResetButtonClick(() => bar.onResetButtonClicked());\r\n        view.bindZoomInButtonClick(() => bar.onZoomInButtonClicked());\r\n        view.bindZoomOutButtonClick(() => bar.onZoomOutButtonClicked());\r\n        view.bindMoveButtonClick(() => bar.onMoveButtonClicked());\r\n        view.bindDeleteButtonClick(() => bar.onDeleteButtonClicked());\r\n        context.onIsReadonlyChanged.subscribe(() => bar.onIsReadonlyChanged());\r\n        context.onSelectedStepChanged.subscribe(() => bar.onSelectedStepChanged());\r\n        context.onIsMoveModeEnabledChanged.subscribe(i => bar.onIsMoveModeEnabledChanged(i));\r\n        return bar;\r\n    }\r\n    onResetButtonClicked() {\r\n        this.context.resetViewPort();\r\n    }\r\n    onZoomInButtonClicked() {\r\n        this.context.zoom(true);\r\n    }\r\n    onZoomOutButtonClicked() {\r\n        this.context.zoom(false);\r\n    }\r\n    onMoveButtonClicked() {\r\n        this.context.toggleIsMoveModeEnabled();\r\n        if (this.context.selectedStep) {\r\n            this.context.setSelectedStep(null);\r\n        }\r\n    }\r\n    onDeleteButtonClicked() {\r\n        if (this.context.selectedStep) {\r\n            this.context.tryDeleteStep(this.context.selectedStep);\r\n        }\r\n    }\r\n    onIsReadonlyChanged() {\r\n        this.refreshDeleteButtonVisibility();\r\n    }\r\n    onSelectedStepChanged() {\r\n        this.refreshDeleteButtonVisibility();\r\n    }\r\n    onIsMoveModeEnabledChanged(isEnabled) {\r\n        this.view.setIsMoveButtonDisabled(!isEnabled);\r\n    }\r\n    refreshDeleteButtonVisibility() {\r\n        const isHidden = !this.context.selectedStep || this.context.isReadonly;\r\n        this.view.setIsDeleteButtonHidden(isHidden);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/control-bar/control-bar-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/control-bar/control-bar.d.ts","writeByteOrderMark":false,"text":"import { DesignerContext } from '../designer-context';\r\nexport declare class ControlBar {\r\n    private readonly view;\r\n    private readonly context;\r\n    static create(parent: HTMLElement, context: DesignerContext): ControlBar;\r\n    private constructor();\r\n    private onResetButtonClicked;\r\n    private onZoomInButtonClicked;\r\n    private onZoomOutButtonClicked;\r\n    private onMoveButtonClicked;\r\n    private onDeleteButtonClicked;\r\n    private onIsReadonlyChanged;\r\n    private onSelectedStepChanged;\r\n    private onIsMoveModeEnabledChanged;\r\n    private refreshDeleteButtonVisibility;\r\n}\r\n"}}
