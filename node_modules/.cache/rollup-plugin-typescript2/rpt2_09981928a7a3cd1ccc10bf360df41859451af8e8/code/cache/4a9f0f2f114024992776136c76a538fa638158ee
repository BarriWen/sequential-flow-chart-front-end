{"code":"import { Dom } from '../core/dom';\r\nimport { Icons } from '../core/icons';\r\nexport class SmartEditorView {\r\n    constructor(root, toggle, toggleIcon) {\r\n        this.root = root;\r\n        this.toggle = toggle;\r\n        this.toggleIcon = toggleIcon;\r\n    }\r\n    static create(parent) {\r\n        const root = Dom.element('div', {\r\n            class: 'sqd-smart-editor'\r\n        });\r\n        const toggle = Dom.element('div', {\r\n            class: 'sqd-smart-editor-toggle',\r\n            title: 'Toggle editor'\r\n        });\r\n        const toggleIcon = Icons.create('sqd-smart-editor-toggle-icon');\r\n        toggle.appendChild(toggleIcon);\r\n        parent.appendChild(toggle);\r\n        parent.appendChild(root);\r\n        return new SmartEditorView(root, toggle, toggleIcon);\r\n    }\r\n    bindToggleIsCollapsedClick(handler) {\r\n        this.toggle.addEventListener('click', e => {\r\n            e.preventDefault();\r\n            handler();\r\n        }, false);\r\n    }\r\n    setIsCollapsed(isCollapsed) {\r\n        Dom.toggleClass(this.root, isCollapsed, 'sqd-hidden');\r\n        Dom.toggleClass(this.toggle, isCollapsed, 'sqd-collapsed');\r\n        this.toggleIcon.innerHTML = isCollapsed ? Icons.options : Icons.close;\r\n    }\r\n    setView(view) {\r\n        if (this.view) {\r\n            this.root.removeChild(this.view.root);\r\n        }\r\n        this.root.appendChild(view.root);\r\n        this.view = view;\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/icons.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/smart-editor/editor.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/smart-editor/smart-editor-view.d.ts","writeByteOrderMark":false,"text":"import { EditorView } from './editor';\r\nexport declare class SmartEditorView {\r\n    private readonly root;\r\n    private readonly toggle;\r\n    private readonly toggleIcon;\r\n    static create(parent: HTMLElement): SmartEditorView;\r\n    private view?;\r\n    private constructor();\r\n    bindToggleIsCollapsedClick(handler: () => void): void;\r\n    setIsCollapsed(isCollapsed: boolean): void;\r\n    setView(view: EditorView): void;\r\n}\r\n"}}
