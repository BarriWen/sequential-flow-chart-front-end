{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { InputView } from '../common-views/input-view';\r\nimport { OutputView } from '../common-views/output-view';\r\nimport { ValidationErrorView } from '../common-views/validation-error-view';\r\nconst PADDING_X = 12;\r\nconst PADDING_Y = 10;\r\nconst MIN_TEXT_WIDTH = 70;\r\nconst ICON_SIZE = 22;\r\nconst RECT_RADIUS = 5;\r\nexport class TaskStepComponentView {\r\n    constructor(g, width, height, joinX, rect, inputView, outputView, validationErrorView) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.rect = rect;\r\n        this.inputView = inputView;\r\n        this.outputView = outputView;\r\n        this.validationErrorView = validationErrorView;\r\n    }\r\n    static create(parent, step, configuration) {\r\n        const g = Dom.svg('g', {\r\n            class: `sqd-task-group sqd-type-${step.type}`\r\n        });\r\n        parent.appendChild(g);\r\n        const boxHeight = ICON_SIZE + PADDING_Y * 2;\r\n        const text = Dom.svg('text', {\r\n            x: ICON_SIZE + PADDING_X * 2,\r\n            y: boxHeight / 2,\r\n            class: 'sqd-task-text'\r\n        });\r\n        text.textContent = step.name;\r\n        g.appendChild(text);\r\n        const textWidth = Math.max(text.getBBox().width, MIN_TEXT_WIDTH);\r\n        const boxWidth = ICON_SIZE + PADDING_X * 3 + textWidth;\r\n        const rect = Dom.svg('rect', {\r\n            x: 0.5,\r\n            y: 0.5,\r\n            class: 'sqd-task-rect',\r\n            width: boxWidth,\r\n            height: boxHeight,\r\n            rx: RECT_RADIUS,\r\n            ry: RECT_RADIUS\r\n        });\r\n        g.insertBefore(rect, text);\r\n        const iconUrl = configuration.iconUrlProvider ? configuration.iconUrlProvider(step.componentType, step.type) : null;\r\n        const icon = iconUrl\r\n            ? Dom.svg('image', {\r\n                href: iconUrl\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(icon, {\r\n            x: PADDING_X,\r\n            y: PADDING_Y,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        g.appendChild(icon);\r\n        const inputView = InputView.createRoundInput(g, boxWidth / 2, 0);\r\n        const outputView = OutputView.create(g, boxWidth / 2, boxHeight);\r\n        const validationErrorView = ValidationErrorView.create(g, boxWidth, 0);\r\n        return new TaskStepComponentView(g, boxWidth, boxHeight, boxWidth / 2, rect, inputView, outputView, validationErrorView);\r\n    }\r\n    getClientPosition() {\r\n        const rect = this.rect.getBoundingClientRect();\r\n        return new Vector(rect.x, rect.y);\r\n    }\r\n    containsElement(element) {\r\n        return this.g.contains(element);\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.inputView.setIsHidden(isDragging);\r\n        this.outputView.setIsHidden(isDragging);\r\n    }\r\n    setIsDisabled(isDisabled) {\r\n        Dom.toggleClass(this.g, isDisabled, 'sqd-disabled');\r\n    }\r\n    setIsSelected(isSelected) {\r\n        Dom.toggleClass(this.rect, isSelected, 'sqd-selected');\r\n    }\r\n    setIsValid(isValid) {\r\n        this.validationErrorView.setIsHidden(isValid);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/input-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/output-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/validation-error-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/task-step/task-step-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { TaskStep } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { ComponentView } from '../component';\r\nexport declare class TaskStepComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    private readonly rect;\r\n    private readonly inputView;\r\n    private readonly outputView;\r\n    private readonly validationErrorView;\r\n    static create(parent: SVGElement, step: TaskStep, configuration: StepsConfiguration): TaskStepComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    containsElement(element: Element): boolean;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsValid(isValid: boolean): void;\r\n}\r\n"}}
