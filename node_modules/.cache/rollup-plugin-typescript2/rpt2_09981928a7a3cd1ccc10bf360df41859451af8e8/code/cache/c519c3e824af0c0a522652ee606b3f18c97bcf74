{"code":"import { Dom } from '../core/dom';\r\nimport { Icons } from '../core/icons';\r\nexport class ControlBarView {\r\n    constructor(resetButton, zoomInButton, zoomOutButton, moveButton, deleteButton) {\r\n        this.resetButton = resetButton;\r\n        this.zoomInButton = zoomInButton;\r\n        this.zoomOutButton = zoomOutButton;\r\n        this.moveButton = moveButton;\r\n        this.deleteButton = deleteButton;\r\n    }\r\n    static create(parent) {\r\n        const root = Dom.element('div', {\r\n            class: 'sqd-control-bar'\r\n        });\r\n        const deleteButton = createButton(Icons.delete, 'Delete selected step');\r\n        deleteButton.classList.add('sqd-hidden');\r\n        const resetButton = createButton(Icons.center, 'Reset');\r\n        const zoomInButton = createButton(Icons.zoomIn, 'Zoom in');\r\n        const zoomOutButton = createButton(Icons.zoomOut, 'Zoom out');\r\n        const moveButton = createButton(Icons.move, 'Turn on/off drag and drop');\r\n        moveButton.classList.add('sqd-disabled');\r\n        root.appendChild(resetButton);\r\n        root.appendChild(zoomInButton);\r\n        root.appendChild(zoomOutButton);\r\n        root.appendChild(moveButton);\r\n        root.appendChild(deleteButton);\r\n        parent.appendChild(root);\r\n        return new ControlBarView(resetButton, zoomInButton, zoomOutButton, moveButton, deleteButton);\r\n    }\r\n    bindResetButtonClick(handler) {\r\n        bindClick(this.resetButton, handler);\r\n    }\r\n    bindZoomInButtonClick(handler) {\r\n        bindClick(this.zoomInButton, handler);\r\n    }\r\n    bindZoomOutButtonClick(handler) {\r\n        bindClick(this.zoomOutButton, handler);\r\n    }\r\n    bindMoveButtonClick(handler) {\r\n        bindClick(this.moveButton, handler);\r\n    }\r\n    bindDeleteButtonClick(handler) {\r\n        bindClick(this.deleteButton, handler);\r\n    }\r\n    setIsDeleteButtonHidden(isHidden) {\r\n        Dom.toggleClass(this.deleteButton, isHidden, 'sqd-hidden');\r\n    }\r\n    setIsMoveButtonDisabled(isDisabled) {\r\n        Dom.toggleClass(this.moveButton, isDisabled, 'sqd-disabled');\r\n    }\r\n}\r\nfunction bindClick(element, handler) {\r\n    element.addEventListener('click', e => {\r\n        e.preventDefault();\r\n        handler();\r\n    }, false);\r\n}\r\nfunction createButton(iconContent, title) {\r\n    const button = Dom.element('div', {\r\n        class: 'sqd-control-bar-button',\r\n        title\r\n    });\r\n    const icon = Icons.create('sqd-control-bar-button-icon', iconContent);\r\n    button.appendChild(icon);\r\n    return button;\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/icons.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/control-bar/control-bar-view.d.ts","writeByteOrderMark":false,"text":"export declare class ControlBarView {\r\n    private readonly resetButton;\r\n    private readonly zoomInButton;\r\n    private readonly zoomOutButton;\r\n    private readonly moveButton;\r\n    private readonly deleteButton;\r\n    static create(parent: HTMLElement): ControlBarView;\r\n    private constructor();\r\n    bindResetButtonClick(handler: () => void): void;\r\n    bindZoomInButtonClick(handler: () => void): void;\r\n    bindZoomOutButtonClick(handler: () => void): void;\r\n    bindMoveButtonClick(handler: () => void): void;\r\n    bindDeleteButtonClick(handler: () => void): void;\r\n    setIsDeleteButtonHidden(isHidden: boolean): void;\r\n    setIsMoveButtonDisabled(isDisabled: boolean): void;\r\n}\r\n"}}
