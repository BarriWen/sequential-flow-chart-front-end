{"code":"import { readMousePosition, readTouchPosition } from '../core/event-readers';\r\nexport class BehaviorController {\r\n    constructor() {\r\n        this.onMouseMoveHandler = (e) => this.onMouseMove(e);\r\n        this.onMouseUpHandler = (e) => this.onMouseUp(e);\r\n        this.onTouchMoveHandler = (e) => this.onTouchMove(e);\r\n        this.onTouchEndHandler = (e) => this.onTouchEnd(e);\r\n        this.onTouchStartHandler = (e) => this.onTouchStart(e);\r\n    }\r\n    start(startPosition, behavior) {\r\n        if (this.state) {\r\n            this.stop(true);\r\n            return;\r\n        }\r\n        this.state = {\r\n            startPosition,\r\n            behavior\r\n        };\r\n        behavior.onStart(this.state.startPosition);\r\n        window.addEventListener('mousemove', this.onMouseMoveHandler, false);\r\n        window.addEventListener('touchmove', this.onTouchMoveHandler, false);\r\n        window.addEventListener('mouseup', this.onMouseUpHandler, false);\r\n        window.addEventListener('touchend', this.onTouchEndHandler, false);\r\n        window.addEventListener('touchstart', this.onTouchStartHandler, false);\r\n    }\r\n    onMouseMove(e) {\r\n        e.preventDefault();\r\n        this.move(readMousePosition(e));\r\n    }\r\n    onTouchMove(e) {\r\n        e.preventDefault();\r\n        this.move(readTouchPosition(e));\r\n    }\r\n    onMouseUp(e) {\r\n        e.preventDefault();\r\n        this.stop(false);\r\n    }\r\n    onTouchEnd(e) {\r\n        e.preventDefault();\r\n        this.stop(false);\r\n    }\r\n    onTouchStart(e) {\r\n        e.preventDefault();\r\n        if (e.touches.length !== 1) {\r\n            this.stop(true);\r\n        }\r\n    }\r\n    move(position) {\r\n        if (!this.state) {\r\n            throw new Error('State is empty');\r\n        }\r\n        const delta = this.state.startPosition.subtract(position);\r\n        const newBehavior = this.state.behavior.onMove(delta);\r\n        if (newBehavior) {\r\n            this.state.behavior.onEnd(true);\r\n            this.state.behavior = newBehavior;\r\n            this.state.startPosition = position;\r\n            this.state.behavior.onStart(this.state.startPosition);\r\n        }\r\n    }\r\n    stop(interrupt) {\r\n        if (!this.state) {\r\n            throw new Error('State is empty');\r\n        }\r\n        window.removeEventListener('mousemove', this.onMouseMoveHandler, false);\r\n        window.removeEventListener('touchmove', this.onTouchMoveHandler, false);\r\n        window.removeEventListener('mouseup', this.onMouseUpHandler, false);\r\n        window.removeEventListener('touchend', this.onTouchEndHandler, false);\r\n        window.removeEventListener('touchstart', this.onTouchEndHandler, false);\r\n        this.state.behavior.onEnd(interrupt);\r\n        this.state = undefined;\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/behavior.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/event-readers.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/behaviors/behavior-controller.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Behavior } from './behavior';\r\nexport declare class BehaviorController {\r\n    private readonly onMouseMoveHandler;\r\n    private readonly onMouseUpHandler;\r\n    private readonly onTouchMoveHandler;\r\n    private readonly onTouchEndHandler;\r\n    private readonly onTouchStartHandler;\r\n    private state?;\r\n    start(startPosition: Vector, behavior: Behavior): void;\r\n    private onMouseMove;\r\n    private onTouchMove;\r\n    private onMouseUp;\r\n    private onTouchEnd;\r\n    private onTouchStart;\r\n    private move;\r\n    private stop;\r\n}\r\n"}}
