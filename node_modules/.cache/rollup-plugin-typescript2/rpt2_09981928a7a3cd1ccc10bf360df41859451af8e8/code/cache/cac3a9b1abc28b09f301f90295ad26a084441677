{"code":"import { Dom } from '../../core/dom';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nconst SIZE = 30;\r\nconst LABEL_HEIGHT$1 = 40;\r\nconst LABEL_PADDING_X = 10;\r\nconst MIN_LABEL_WIDTH = 50;\r\nexport class StartComponentView {\r\n    constructor(g, width, height, joinX, component) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.component = component;\r\n    }\r\n    static create(parent, sequence, configuration) {\r\n        const g = Dom.svg('g');\r\n        parent.appendChild(g);\r\n        const sequenceComponent = SequenceComponent.create(g, sequence, configuration);\r\n        const view = sequenceComponent.view;\r\n        let startCircle;\r\n        if (sequence.length == 0) {\r\n            startCircle = createCircle(g, view.joinX - SIZE / 3, 0, \"Click here to choose your trigger\");\r\n        }\r\n        else if (!(sequence[0].id.startsWith('start-component'))) {\r\n            startCircle = createCircle(g, view.joinX - SIZE / 3, 0, \"Click here to choose your trigger\");\r\n        }\r\n        else {\r\n            startCircle = createCircle(g, view.joinX - SIZE / 3, 0, \" \");\r\n        }\r\n        // Dom.translate(startCircle, view.joinX - SIZE / 2, 0);\r\n        g.appendChild(startCircle);\r\n        Dom.translate(view.g, 0, SIZE);\r\n        return new StartComponentView(g, view.width, view.height + SIZE * 2, view.joinX, sequenceComponent);\r\n    }\r\n    getClientPosition() {\r\n        throw new Error('Not supported');\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        (_a = this.g.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.g);\r\n    }\r\n}\r\nfunction createCircle(parent, x, y, text) {\r\n    let g = Dom.svg(\"g\", {\r\n        class: \"sqd-start\",\r\n        id: 'start'\r\n    });\r\n    parent.appendChild(g);\r\n    if (text == \" \") {\r\n        Dom.attrs(g, {\r\n            visibility: \"hidden\"\r\n        });\r\n        // return g;\r\n    }\r\n    const nameText = Dom.svg('text', {\r\n        class: 'sqd-label-text',\r\n        x,\r\n        y: y + LABEL_HEIGHT$1 / 2\r\n    });\r\n    nameText.textContent = text;\r\n    g.appendChild(nameText);\r\n    const nameWidth = Math.max(g.getBBox().width + LABEL_PADDING_X * 2, MIN_LABEL_WIDTH);\r\n    const nameRect = Dom.svg('rect', {\r\n        class: 'sqd-label-rect',\r\n        width: nameWidth,\r\n        height: LABEL_HEIGHT$1,\r\n        x: x - nameWidth / 2,\r\n        y,\r\n        rx: 10,\r\n        ry: 10\r\n    });\r\n    g.insertBefore(nameRect, nameText);\r\n    return g;\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-component.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/start-stop/start-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { Sequence } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { ComponentView } from '../component';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nexport declare class StartComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly component: SequenceComponent;\r\n    static create(parent: SVGElement, sequence: Sequence, configuration: StepsConfiguration): StartComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    destroy(): void;\r\n}\r\n"}}
