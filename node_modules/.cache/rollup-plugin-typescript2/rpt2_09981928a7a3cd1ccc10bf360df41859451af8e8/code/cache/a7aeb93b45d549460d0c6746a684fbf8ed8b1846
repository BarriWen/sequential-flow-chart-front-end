{"code":"import { StepComponentState } from '../component';\r\nimport { SwitchStepComponentView } from './switch-step-component-view';\r\nexport class SwitchStepComponent {\r\n    constructor(view, step, parentSequence, configuration) {\r\n        this.view = view;\r\n        this.step = step;\r\n        this.parentSequence = parentSequence;\r\n        this.configuration = configuration;\r\n        this.currentState = StepComponentState.default;\r\n    }\r\n    static create(parent, step, parentSequence, configuration) {\r\n        const view = SwitchStepComponentView.create(parent, step, configuration);\r\n        return new SwitchStepComponent(view, step, parentSequence, configuration);\r\n    }\r\n    findByElement(element) {\r\n        for (const sequence of this.view.sequenceComponents) {\r\n            const sc = sequence.findByElement(element);\r\n            if (sc) {\r\n                return sc;\r\n            }\r\n        }\r\n        if (this.view.containsElement(element)) {\r\n            return this;\r\n        }\r\n        return null;\r\n    }\r\n    findById(stepId) {\r\n        if (this.step.id === stepId) {\r\n            return this;\r\n        }\r\n        for (const sequence of this.view.sequenceComponents) {\r\n            const sc = sequence.findById(stepId);\r\n            if (sc) {\r\n                return sc;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getPlaceholders(result) {\r\n        if (this.currentState !== StepComponentState.dragging) {\r\n            this.view.sequenceComponents.forEach(sc => sc.getPlaceholders(result));\r\n        }\r\n    }\r\n    setIsDragging(isDragging) {\r\n        if (this.currentState !== StepComponentState.dragging) {\r\n            this.view.sequenceComponents.forEach(s => s.setIsDragging(isDragging));\r\n        }\r\n        this.view.setIsDragging(isDragging);\r\n    }\r\n    setState(state) {\r\n        this.currentState = state;\r\n        switch (state) {\r\n            case StepComponentState.default:\r\n                this.view.setIsSelected(false);\r\n                this.view.setIsDisabled(false);\r\n                break;\r\n            case StepComponentState.selected:\r\n                this.view.setIsSelected(true);\r\n                this.view.setIsDisabled(false);\r\n                break;\r\n            case StepComponentState.dragging:\r\n                this.view.setIsSelected(false);\r\n                this.view.setIsDisabled(true);\r\n                break;\r\n        }\r\n    }\r\n    validate() {\r\n        const isValid = this.configuration.validator ? this.configuration.validator(this.step) : true;\r\n        this.view.setIsValid(isValid);\r\n        let areChildrenValid = true;\r\n        for (const component of this.view.sequenceComponents) {\r\n            areChildrenValid = component.validate() && areChildrenValid;\r\n        }\r\n        return isValid && areChildrenValid;\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/switch-step/switch-step-component-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/switch-step/switch-step-component.d.ts","writeByteOrderMark":false,"text":"import { Sequence, Step, SwitchStep } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { Placeholder, StepComponent, StepComponentState } from '../component';\r\nimport { SwitchStepComponentView } from './switch-step-component-view';\r\nexport declare class SwitchStepComponent implements StepComponent {\r\n    readonly view: SwitchStepComponentView;\r\n    readonly step: Step;\r\n    readonly parentSequence: Sequence;\r\n    private readonly configuration;\r\n    static create(parent: SVGElement, step: SwitchStep, parentSequence: Sequence, configuration: StepsConfiguration): SwitchStepComponent;\r\n    private currentState;\r\n    private constructor();\r\n    findByElement(element: Element): StepComponent | null;\r\n    findById(stepId: string): StepComponent | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setState(state: StepComponentState): void;\r\n    validate(): boolean;\r\n}\r\n"}}
