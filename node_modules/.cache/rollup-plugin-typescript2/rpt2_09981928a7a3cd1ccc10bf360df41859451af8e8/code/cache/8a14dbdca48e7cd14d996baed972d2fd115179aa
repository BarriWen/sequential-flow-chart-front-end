{"code":"export var StepComponentState;\r\n(function (StepComponentState) {\r\n    StepComponentState[StepComponentState[\"default\"] = 0] = \"default\";\r\n    StepComponentState[StepComponentState[\"selected\"] = 1] = \"selected\";\r\n    StepComponentState[StepComponentState[\"dragging\"] = 2] = \"dragging\";\r\n})(StepComponentState || (StepComponentState = {}));\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/component.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Sequence, Step } from '../definition';\r\nexport interface Component {\r\n    view: ComponentView;\r\n    findById(stepId: string): StepComponent | null;\r\n    findByElement(element: Element): StepComponent | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    validate(): boolean;\r\n}\r\nexport interface ComponentView {\r\n    g: SVGGElement;\r\n    width: number;\r\n    height: number;\r\n    joinX: number;\r\n    getClientPosition(): Vector;\r\n}\r\nexport interface Placeholder {\r\n    element: Element;\r\n    parentSequence: Sequence;\r\n    index: number;\r\n    setIsHover(isHover: boolean): void;\r\n}\r\nexport interface StepComponent extends Component {\r\n    step: Step;\r\n    parentSequence: Sequence;\r\n    setState(state: StepComponentState): void;\r\n}\r\nexport declare enum StepComponentState {\r\n    default = 0,\r\n    selected = 1,\r\n    dragging = 2\r\n}\r\n"}}
