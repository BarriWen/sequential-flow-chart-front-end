{"code":"import { Dom } from '../core/dom';\r\nexport class ToolboxItemView {\r\n    constructor(root) {\r\n        this.root = root;\r\n    }\r\n    static create(parent, step, configuration) {\r\n        const root = Dom.element('div', {\r\n            class: `sqd-toolbox-item sqd-type-${step.type}`,\r\n            title: step.name\r\n        });\r\n        const iconUrl = configuration.iconUrlProvider ? configuration.iconUrlProvider(step.componentType, step.type) : null;\r\n        const icon = Dom.element('div', {\r\n            class: 'sqd-toolbox-item-icon'\r\n        });\r\n        if (iconUrl) {\r\n            const iconImage = Dom.element('img', {\r\n                class: 'sqd-toolbox-item-icon-image',\r\n                src: iconUrl\r\n            });\r\n            icon.appendChild(iconImage);\r\n        }\r\n        else {\r\n            icon.classList.add('sqd-no-icon');\r\n        }\r\n        const text = Dom.element('div', {\r\n            class: 'sqd-toolbox-item-text'\r\n        });\r\n        text.textContent = step.name;\r\n        root.appendChild(icon);\r\n        root.appendChild(text);\r\n        parent.appendChild(root);\r\n        return new ToolboxItemView(root);\r\n    }\r\n    bindMousedown(handler) {\r\n        this.root.addEventListener('mousedown', handler, false);\r\n    }\r\n    bindTouchstart(handler) {\r\n        this.root.addEventListener('touchstart', handler, false);\r\n    }\r\n    bindContextMenu(handler) {\r\n        this.root.addEventListener('contextmenu', handler, false);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/toolbox/toolbox-item-view.d.ts","writeByteOrderMark":false,"text":"import { StepDefinition, StepsConfiguration } from '../designer-configuration';\r\nexport declare class ToolboxItemView {\r\n    private readonly root;\r\n    static create(parent: HTMLElement, step: StepDefinition, configuration: StepsConfiguration): ToolboxItemView;\r\n    private constructor();\r\n    bindMousedown(handler: (e: MouseEvent) => void): void;\r\n    bindTouchstart(handler: (e: TouchEvent) => void): void;\r\n    bindContextMenu(handler: (e: MouseEvent) => void): void;\r\n}\r\n"}}
