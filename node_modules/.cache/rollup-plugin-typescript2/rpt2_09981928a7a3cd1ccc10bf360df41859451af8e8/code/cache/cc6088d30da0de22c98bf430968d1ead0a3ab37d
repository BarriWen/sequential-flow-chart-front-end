{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nexport class RegionView {\r\n    constructor(regions) {\r\n        this.regions = regions;\r\n    }\r\n    static create(parent, widths, height) {\r\n        const totalWidth = widths.reduce((c, v) => c + v, 0);\r\n        const mainRegion = Dom.svg('rect', {\r\n            class: 'sqd-region',\r\n            width: totalWidth,\r\n            height,\r\n            fill: 'transparent',\r\n            rx: 5,\r\n            ry: 5\r\n        });\r\n        const regions = [mainRegion];\r\n        parent.insertBefore(mainRegion, parent.firstChild);\r\n        let offsetX = widths[0];\r\n        for (let i = 1; i < widths.length; i++) {\r\n            const line = Dom.svg('line', {\r\n                class: 'sqd-region',\r\n                x1: offsetX,\r\n                y1: 0,\r\n                x2: offsetX,\r\n                y2: height\r\n            });\r\n            regions.push(line);\r\n            parent.insertBefore(line, parent.firstChild);\r\n            offsetX += widths[i];\r\n        }\r\n        return new RegionView(regions);\r\n    }\r\n    getClientPosition() {\r\n        const rect = this.regions[0].getBoundingClientRect();\r\n        return new Vector(rect.x, rect.y);\r\n    }\r\n    setIsSelected(isSelected) {\r\n        this.regions.forEach(region => {\r\n            Dom.toggleClass(region, isSelected, 'sqd-selected');\r\n        });\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/common-views/region-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nexport declare class RegionView {\r\n    private readonly regions;\r\n    static create(parent: SVGElement, widths: number[], height: number): RegionView;\r\n    constructor(regions: SVGElement[]);\r\n    getClientPosition(): Vector;\r\n    setIsSelected(isSelected: boolean): void;\r\n}\r\n"}}
