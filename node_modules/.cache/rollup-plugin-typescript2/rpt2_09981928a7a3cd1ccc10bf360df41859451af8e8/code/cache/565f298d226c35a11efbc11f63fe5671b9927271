{"code":"import { ControlBar } from './control-bar/control-bar';\r\nimport { Dom } from './core/dom';\r\nimport { SmartEditor } from './smart-editor/smart-editor';\r\nimport { Toolbox } from './toolbox/toolbox';\r\nimport { Workspace } from './workspace/workspace';\r\nconst ICON_SIZE = 22;\r\nconst LABEL_PADDING_X = 10;\r\nexport class DesignerView {\r\n    constructor(root, layoutController, workspace, toolbox) {\r\n        this.root = root;\r\n        this.layoutController = layoutController;\r\n        this.workspace = workspace;\r\n        this.toolbox = toolbox;\r\n        this.onResizeHandler = () => this.onResize();\r\n        this.onKeyUpHandlers = [];\r\n    }\r\n    static create(parent, context, configuration) {\r\n        const theme = configuration.theme || 'light';\r\n        const root = Dom.element('div', {\r\n            class: `sqd-designer sqd-theme-${theme}`\r\n        });\r\n        parent.appendChild(root);\r\n        const workspace = Workspace.create(root, context);\r\n        let toolbox = undefined;\r\n        if (!configuration.toolbox.isHidden) {\r\n            toolbox = Toolbox.create(root, context);\r\n        }\r\n        ControlBar.create(root, context);\r\n        if (!configuration.editors.isHidden) {\r\n            SmartEditor.create(root, context);\r\n        }\r\n        // Add title box\r\n        const info = Dom.svg('svg', {\r\n            class: \"info-box\",\r\n            width: 320,\r\n            height: 40\r\n        });\r\n        const title = Dom.svg('text', {\r\n            x: 160,\r\n            y: 25,\r\n            class: 'info-box-title'\r\n        });\r\n        title.textContent = context.definition.properties.journeyName;\r\n        info.appendChild(title);\r\n        const nameWidth = Math.max(info.getBBox().width + LABEL_PADDING_X * 2, 320);\r\n        console.log(info.getBBox());\r\n        const rect = Dom.svg('rect', {\r\n            class: 'info-box-rect',\r\n            width: nameWidth,\r\n            height: 40,\r\n            rx: 20,\r\n            ry: 20,\r\n        });\r\n        info.insertBefore(rect, title);\r\n        // Expanded titlebox\r\n        const dialogBox = Dom.element('div', {\r\n            class: 'info-box-prompt',\r\n        });\r\n        const dialogForm = Dom.element('form');\r\n        // console.log(\"In designer view, \", context.definition.properties.journeyName);\r\n        const txt = Dom.element('input', {\r\n            class: 'info-box-prompt-input',\r\n            type: 'text',\r\n            name: 'title',\r\n            placeholder: title.textContent,\r\n            value: title.textContent\r\n        });\r\n        dialogForm.appendChild(txt);\r\n        txt.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        // More text contents\r\n        const column1 = Dom.element('div', {\r\n            class: 'info-box-prompt-column',\r\n        });\r\n        const txt1 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt1.textContent = \"Owner\";\r\n        column1.appendChild(txt1);\r\n        txt1.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt2 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt2.textContent = \"Location\";\r\n        column1.appendChild(txt2);\r\n        txt2.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt3 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt3.textContent = \"Created\";\r\n        column1.appendChild(txt3);\r\n        txt3.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt4 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt4.textContent = \"Last Modified\";\r\n        column1.appendChild(txt4);\r\n        txt4.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const column2 = Dom.element('div', {\r\n            class: 'info-box-prompt-column',\r\n        });\r\n        const txt5 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt5.textContent = context.definition.properties.createdBy;\r\n        column2.appendChild(txt5);\r\n        txt5.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt6 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        txt6.textContent = \"Location\";\r\n        column2.appendChild(txt6);\r\n        txt6.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt7 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        let date = new Date(context.definition.properties.createdAt);\r\n        txt7.textContent = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear();\r\n        column2.appendChild(txt7);\r\n        txt7.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const txt8 = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        date = new Date(context.definition.properties.createdAt);\r\n        txt8.textContent = (date.getMonth() + 1) + \"/\" + date.getDate() + \"/\" + date.getFullYear();\r\n        column2.appendChild(txt8);\r\n        txt8.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        const column3 = Dom.element('div', {\r\n            class: 'info-box-prompt-column',\r\n        });\r\n        const description = Dom.element('p', { class: \"info-box-prompt-column-text\" });\r\n        const descripArea = Dom.element('textarea', {\r\n            class: 'input-box-prompt-textarea',\r\n            name: \"description\",\r\n            value: context.definition.properties.description\r\n        });\r\n        description.textContent = \"Description\";\r\n        column3.appendChild(description);\r\n        column3.appendChild(descripArea);\r\n        // Buttons\r\n        const buttonDiv = Dom.element('div', {\r\n            class: 'info-box-prompt-btn-div',\r\n        });\r\n        const btn1 = Dom.element('input', {\r\n            class: 'info-box-prompt-btn',\r\n            type: 'submit',\r\n            value: 'Save'\r\n        });\r\n        btn1.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            title.textContent = txt.value;\r\n            txt.placeholder = title.textContent;\r\n            txt.value = txt.placeholder;\r\n            context.definition.properties.journeyName = txt.value;\r\n            context.definition.properties.description = descripArea.value;\r\n            Dom.toggleClass(dialogBox, true, 'sqd-hidden');\r\n        });\r\n        buttonDiv.appendChild(btn1);\r\n        const btn2 = Dom.element('button', {\r\n            class: 'info-box-prompt-btn',\r\n        });\r\n        btn2.textContent = \"Cancel\";\r\n        btn2.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            txt.value = \"\";\r\n            Dom.toggleClass(dialogBox, true, 'sqd-hidden');\r\n        });\r\n        buttonDiv.appendChild(btn2);\r\n        // Export button\r\n        const btn3 = Dom.element('input', {\r\n            class: 'info-box-prompt-btn',\r\n            type: 'submit',\r\n            value: 'Export'\r\n        });\r\n        btn3.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            Dom.toggleClass(exportPanel, false, 'sqd-hidden');\r\n        });\r\n        buttonDiv.appendChild(btn3);\r\n        const btn4 = Dom.element('button', {\r\n            class: 'info-box-prompt-btn',\r\n        });\r\n        btn4.textContent = \"Share\";\r\n        btn4.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            Dom.toggleClass(dialogBox, false, 'sqd-hidden');\r\n        });\r\n        buttonDiv.appendChild(btn4);\r\n        // Export panel view\r\n        const choices = ['Small Jpg', 'Medium Jpg', 'Large Jpg', 'Smaller size', 'Better Quality'];\r\n        const exportPanel = Dom.element('div', {\r\n            class: 'export-panel sqd-hidden',\r\n        });\r\n        const pdfForm = Dom.element('form');\r\n        for (let i = 3; i < choices.length; i++) {\r\n            const radio = Dom.element('input', {\r\n                type: 'radio',\r\n                name: 'pdfChoice',\r\n                value: i\r\n            });\r\n            pdfForm.appendChild(radio);\r\n            const choice = Dom.element('label');\r\n            choice.innerText = choices[i];\r\n            pdfForm.appendChild(choice);\r\n            choice.insertAdjacentHTML(\"afterend\", \"</br>\");\r\n        }\r\n        const exportBtnDiv = Dom.element('div', {\r\n            class: 'info-box-prompt-btn-div',\r\n        });\r\n        const exportBtn = Dom.element('input', {\r\n            class: 'info-box-prompt-btn',\r\n            type: 'submit',\r\n            value: 'Confirm'\r\n        });\r\n        exportBtn.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            var elem = document.getElementsByTagName('input');\r\n            let output;\r\n            for (let i = 0; i < elem.length; i++) {\r\n                if (elem[i].type == 'radio' && elem[i].checked) {\r\n                    output = parseInt(elem[i].value);\r\n                    console.log(\"Export pdf with: \", choices[output]);\r\n                }\r\n            }\r\n            Dom.toggleClass(exportPanel, true, 'sqd-hidden');\r\n            Dom.toggleClass(dialogBox, true, 'sqd-hidden');\r\n        });\r\n        exportBtnDiv.appendChild(exportBtn);\r\n        const exportBtn2 = Dom.element('button', {\r\n            class: 'info-box-prompt-btn',\r\n        });\r\n        exportBtn2.innerText = \"Cancel\";\r\n        exportBtn2.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            Dom.toggleClass(exportPanel, true, 'sqd-hidden');\r\n        });\r\n        exportBtnDiv.appendChild(exportBtn2);\r\n        pdfForm.appendChild(exportBtnDiv);\r\n        exportPanel.appendChild(pdfForm);\r\n        dialogForm.appendChild(buttonDiv);\r\n        dialogBox.appendChild(dialogForm);\r\n        Dom.toggleClass(dialogBox, true, 'sqd-hidden');\r\n        info.addEventListener('click', function () {\r\n            Dom.toggleClass(dialogBox, false, 'sqd-hidden');\r\n        });\r\n        const avatarSvg = Dom.svg('svg', {\r\n            class: \"avatar-box\",\r\n            width: 80,\r\n            height: 80\r\n        });\r\n        const avatarUrl = './assets/avatar.svg';\r\n        const avatar = avatarUrl\r\n            ? Dom.svg('image', {\r\n                href: avatarUrl,\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(avatar, {\r\n            class: 'avatar',\r\n            id: `avatar${Date.now()}`,\r\n            x: 20,\r\n            y: 15,\r\n            width: 3 * ICON_SIZE,\r\n            height: 3 * ICON_SIZE\r\n        });\r\n        avatarSvg.appendChild(avatar);\r\n        root.appendChild(info);\r\n        root.appendChild(dialogBox);\r\n        root.appendChild(exportPanel);\r\n        root.appendChild(avatarSvg);\r\n        dialogForm.appendChild(column1);\r\n        dialogForm.appendChild(column2);\r\n        dialogForm.appendChild(column3);\r\n        const view = new DesignerView(root, context.layoutController, workspace, toolbox);\r\n        view.reloadLayout();\r\n        window.addEventListener('resize', view.onResizeHandler, false);\r\n        return view;\r\n    }\r\n    bindKeyUp(handler) {\r\n        document.addEventListener('keyup', handler, false);\r\n        this.onKeyUpHandlers.push(handler);\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        window.removeEventListener('resize', this.onResizeHandler, false);\r\n        this.onKeyUpHandlers.forEach(h => document.removeEventListener('keyup', h, false));\r\n        this.workspace.destroy();\r\n        (_a = this.toolbox) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        (_b = this.root.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.root);\r\n    }\r\n    onResize() {\r\n        this.reloadLayout();\r\n    }\r\n    reloadLayout() {\r\n        const isMobile = this.layoutController.isMobile();\r\n        Dom.toggleClass(this.root, !isMobile, 'sqd-layout-desktop');\r\n        Dom.toggleClass(this.root, isMobile, 'sqd-layout-mobile');\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/control-bar/control-bar.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/layout-controller.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/smart-editor/smart-editor.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/toolbox.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/workspace.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/designer-view.d.ts","writeByteOrderMark":false,"text":"import { DesignerConfiguration } from './designer-configuration';\r\nimport { DesignerContext } from './designer-context';\r\nimport { LayoutController } from './layout-controller';\r\nimport { Toolbox } from './toolbox/toolbox';\r\nimport { Workspace } from './workspace/workspace';\r\nexport declare class DesignerView {\r\n    private readonly root;\r\n    private readonly layoutController;\r\n    readonly workspace: Workspace;\r\n    private readonly toolbox?;\r\n    static create(parent: HTMLElement, context: DesignerContext, configuration: DesignerConfiguration): DesignerView;\r\n    private readonly onResizeHandler;\r\n    private readonly onKeyUpHandlers;\r\n    constructor(root: HTMLElement, layoutController: LayoutController, workspace: Workspace, toolbox?: Toolbox | undefined);\r\n    bindKeyUp(handler: KeyUpHandler): void;\r\n    destroy(): void;\r\n    private onResize;\r\n    private reloadLayout;\r\n}\r\nexport declare type KeyUpHandler = (e: KeyboardEvent) => void;\r\n"}}
