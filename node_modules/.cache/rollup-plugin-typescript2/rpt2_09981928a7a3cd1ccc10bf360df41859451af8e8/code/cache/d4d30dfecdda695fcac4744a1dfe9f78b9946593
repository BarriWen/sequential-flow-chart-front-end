{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { JoinView } from '../common-views//join-view';\r\nimport { LabelView } from '../common-views//label-view';\r\nimport { RegionView } from '../common-views//region-view';\r\nimport { ValidationErrorView } from '../common-views//validation-error-view';\r\nimport { InputView } from '../common-views/input-view';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nconst MIN_CHILDREN_WIDTH = 50;\r\nconst PADDING_X = 20;\r\nconst PADDING_TOP = 20;\r\nconst LABEL_HEIGHT = 22;\r\nconst CONNECTION_HEIGHT = 16;\r\nconst RECT_RADIUS = 15;\r\nconst MIN_TEXT_WIDTH = 70;\r\nconst PADDING_Y = 10;\r\nconst ICON_SIZE = 22;\r\nexport class SwitchStepComponentView {\r\n    constructor(g, width, height, joinX, sequenceComponents, regionView, inputView, validationErrorView) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.sequenceComponents = sequenceComponents;\r\n        this.regionView = regionView;\r\n        this.inputView = inputView;\r\n        this.validationErrorView = validationErrorView;\r\n    }\r\n    static create(parent, step, configuration) {\r\n        const g = Dom.svg('g', {\r\n            class: `sqd-switch-group sqd-type-${step.type}`\r\n        });\r\n        parent.appendChild(g);\r\n        const branchNames = Object.keys(step.branches);\r\n        const sequenceComponents = branchNames.map(bn => SequenceComponent.create(g, step.branches[bn], configuration));\r\n        const maxChildHeight = Math.max(...sequenceComponents.map(s => s.view.height));\r\n        const containerWidths = sequenceComponents.map(s => Math.max(s.view.width, MIN_CHILDREN_WIDTH) + PADDING_X * 2);\r\n        const containersWidth = containerWidths.reduce((p, c) => p + c, 0);\r\n        // const containerHeight = maxChildHeight + PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT * 2;\r\n        const containerOffsets = [];\r\n        const joinXs = sequenceComponents.map(s => Math.max(s.view.joinX, MIN_CHILDREN_WIDTH / 2));\r\n        const boxHeight = ICON_SIZE + PADDING_Y * 2;\r\n        const containerHeight = maxChildHeight + PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT * 2 + boxHeight / 2;\r\n        let totalX = 0;\r\n        for (let i = 0; i < branchNames.length; i++) {\r\n            containerOffsets.push(totalX);\r\n            totalX += containerWidths[i];\r\n        }\r\n        // Create branch\r\n        branchNames.forEach((branchName, i) => {\r\n            const sequence = sequenceComponents[i];\r\n            const offsetX = containerOffsets[i];\r\n            LabelView.create(g, offsetX + joinXs[i] + PADDING_X, PADDING_TOP + LABEL_HEIGHT + CONNECTION_HEIGHT + boxHeight / 2, branchName, 'secondary');\r\n            // const childEndY = PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT + sequence.view.height;\r\n            // const fillingHeight = containerHeight - childEndY - CONNECTION_HEIGHT;\r\n            // if (fillingHeight > 0) {\r\n            // \tJoinView.createStraightJoin(g, new Vector(containerOffsets[i] + joinXs[i] + PADDING_X, childEndY), fillingHeight);\r\n            // }\r\n            const sequenceX = offsetX + PADDING_X + Math.max((MIN_CHILDREN_WIDTH - sequence.view.width) / 2, 0);\r\n            const sequenceY = PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT + boxHeight / 2;\r\n            JoinView.createStraightJoin(g, new Vector(containerOffsets[i] + joinXs[i] + PADDING_X, PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT + boxHeight / 2), 120);\r\n            Dom.translate(sequence.view.g, sequenceX, sequenceY);\r\n        });\r\n        // LabelView.create(g, containerWidths[0], PADDING_TOP, step.name);\r\n        const g1 = Dom.svg(\"g\");\r\n        const text = Dom.svg('text', {\r\n            x: ICON_SIZE + containerWidths[0] - PADDING_X * 2,\r\n            y: boxHeight / 2 + PADDING_TOP,\r\n            class: 'sqd-task-text'\r\n        });\r\n        text.textContent = \"If/Else\";\r\n        g1.appendChild(text);\r\n        const textWidth = Math.max(text.getBBox().width + PADDING_X * 2 + ICON_SIZE, MIN_TEXT_WIDTH);\r\n        const boxWidth = ICON_SIZE + PADDING_X * 3 + textWidth;\r\n        const rect = Dom.svg('rect', {\r\n            x: containerWidths[0] - textWidth,\r\n            y: PADDING_TOP,\r\n            class: 'sqd-task-rect',\r\n            width: boxWidth,\r\n            height: boxHeight,\r\n            rx: 15,\r\n            ry: 15\r\n        });\r\n        g1.insertBefore(rect, text);\r\n        const iconUrl = configuration.iconUrlProvider ? configuration.iconUrlProvider(step.componentType, step.type) : null;\r\n        const icon = iconUrl\r\n            ? Dom.svg('image', {\r\n                href: iconUrl\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(icon, {\r\n            x: containerWidths[0] - textWidth + PADDING_X,\r\n            y: PADDING_TOP * 1.5,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        const moreUrl = './assets/more.svg';\r\n        const moreIcon = moreUrl\r\n            ? Dom.svg('image', {\r\n                href: moreUrl,\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(moreIcon, {\r\n            class: 'more',\r\n            id: Date.now(),\r\n            x: containerWidths[0] + 2 * PADDING_X,\r\n            y: PADDING_TOP * 1.5,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        //add 3 icons\r\n        const iconUrl1 = './assets/copy.svg';\r\n        // // add click event for icon\r\n        const icon1 = iconUrl1\r\n            ? Dom.svg('image', { href: iconUrl1 })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(icon1, {\r\n            class: \"moreicon\",\r\n            id: `icon1${Date.now()}`,\r\n            x: containerWidths[0] + 2 * PADDING_X + ICON_SIZE + 30,\r\n            y: PADDING_TOP * 1.5,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        const iconUrl2 = './assets/delete.svg';\r\n        // add click event for icon\r\n        const icon2 = iconUrl2\r\n            ? Dom.svg('image', {\r\n                href: iconUrl2\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(icon2, {\r\n            class: \"moreicon\",\r\n            id: `icon2${Date.now()}`,\r\n            x: containerWidths[0] + 2 * PADDING_X + ICON_SIZE + 10,\r\n            y: PADDING_TOP * 1.5 + 22,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        const iconUrl3 = './assets/edit.svg';\r\n        // add click event for icon\r\n        const icon3 = iconUrl3\r\n            ? Dom.svg('image', {\r\n                href: iconUrl3\r\n            })\r\n            : Dom.svg('rect', {\r\n                class: 'sqd-task-empty-icon',\r\n                rx: 4,\r\n                ry: 4\r\n            });\r\n        Dom.attrs(icon3, {\r\n            class: \"moreicon\",\r\n            id: `p${Date.now()}`,\r\n            x: containerWidths[0] + 2 * PADDING_X + ICON_SIZE + 10,\r\n            y: PADDING_TOP * 1.5 - 22,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE\r\n        });\r\n        const gRightPop3 = Dom.svg('g', {\r\n            class: `sqd-switch-group right-popup sqd-hidden Collapsed`\r\n        });\r\n        const gDropdown = Dom.svg('g', {\r\n            class: `sqd-task-group dropdown sqd-hidden Collapsed`\r\n        });\r\n        const rect1 = Dom.svg('rect', {\r\n            x: containerWidths[0] - textWidth,\r\n            y: PADDING_TOP + boxHeight,\r\n            class: 'sqd-task-rect',\r\n            width: boxWidth,\r\n            height: 2 * boxHeight,\r\n            rx: RECT_RADIUS,\r\n            ry: RECT_RADIUS\r\n        });\r\n        Dom.attrs(rect1, {\r\n            //class: 'sqd-hidden',\r\n            id: `dropdown${Date.now()}`\r\n        });\r\n        const nameText = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - textWidth,\r\n            y: 2 * boxHeight,\r\n        });\r\n        Dom.attrs(nameText, {\r\n            //class: 'sqd-hidden',\r\n            id: `dropdownword1${Date.now()}`\r\n        });\r\n        const nameText1 = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - textWidth,\r\n            y: 2.5 * boxHeight,\r\n        });\r\n        Dom.attrs(nameText1, {\r\n            //class: 'sqd-hidden',\r\n            id: `dropdownword2${Date.now()}`\r\n        });\r\n        nameText.textContent = 'Select List:';\r\n        nameText1.textContent = 'Run:';\r\n        gDropdown.appendChild(nameText);\r\n        gDropdown.appendChild(nameText1);\r\n        gDropdown.insertBefore(rect1, nameText);\r\n        const gSubDropdown = Dom.svg('g', {\r\n            class: `sqd-switch-group sub-dropdown sqd-hidden Collapsed`\r\n        });\r\n        const gSubDropdown1 = Dom.svg('g', {\r\n            class: `sqd-switch-group sub-dropdown sqd-hidden Collapsed`\r\n        });\r\n        const gSubDropdownbox = Dom.svg('g', {\r\n            class: `sqd-switch-group sub-dropdownbox`\r\n        });\r\n        const gSubDropdownbox1 = Dom.svg('g', {\r\n            class: `sqd-switch-group sub-dropdownbox`\r\n        });\r\n        const dropdownBoxShape = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight,\r\n            //id: `dropdownBoxShape${Date.now()}`\r\n        });\r\n        const dropdownBoxShape1 = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight,\r\n            //id: `dropdownBoxShape1${Date.now()}`\r\n        });\r\n        const dropdownRightButton = Dom.svg('text', {\r\n            class: 'sqd-task-text select-field',\r\n            x: containerWidths[0] + 43,\r\n            y: 1.85 * boxHeight,\r\n        });\r\n        const dropdownRightButton1 = Dom.svg('text', {\r\n            class: 'sqd-task-text select-field',\r\n            x: containerWidths[0] + 43,\r\n            y: 2.35 * boxHeight,\r\n        });\r\n        dropdownRightButton.textContent = \"▼\";\r\n        dropdownRightButton1.textContent = \"▼\";\r\n        const dropdownBoxInnerText = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 1.85 * boxHeight,\r\n        });\r\n        dropdownBoxInnerText.textContent = 'Select';\r\n        const dropdownBoxInnerText1 = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 2.35 * boxHeight,\r\n        });\r\n        dropdownBoxInnerText1.textContent = 'Select';\r\n        const dropdownBoxShapeAfter = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight,\r\n            id: `dropdownBoxShape${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxShapeAfter, {\r\n            opacity: 0\r\n        });\r\n        const dropdownBoxShape1After = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight,\r\n            id: `dropdownBoxShape1${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxShape1After, {\r\n            opacity: 0\r\n        });\r\n        const dropdownBoxBottomShape = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight + 15\r\n        });\r\n        const dropdownBoxBottomShapeText = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 1.85 * boxHeight + 15\r\n        });\r\n        dropdownBoxBottomShapeText.textContent = 'Any list';\r\n        const dropdownBoxBottomShapecover = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field choice',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight + 15,\r\n            id: `dropdownBoxBottomShapecover${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxBottomShapecover, {\r\n            opacity: 0.3\r\n        });\r\n        const dropdownBoxBottomShapeS = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight + 30\r\n        });\r\n        const dropdownBoxBottomShapeSText = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight + 15,\r\n        });\r\n        dropdownBoxBottomShapeSText.textContent = 'List A';\r\n        const dropdownBoxBottomShapeScover = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field choice',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 1.7 * boxHeight + 30,\r\n            id: `dropdownBoxBottomShapeScover${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxBottomShapeScover, {\r\n            opacity: 0.3\r\n        });\r\n        const dropdownBoxBottomShape1 = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight + 15\r\n        });\r\n        const dropdownBoxBottomShape1Text = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 2.35 * boxHeight + 15,\r\n        });\r\n        dropdownBoxBottomShape1Text.textContent = 'Once';\r\n        const dropdownBoxBottomShape1cover = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field choice',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight + 15,\r\n            id: `dropdownBoxBottomShape1cover${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxBottomShape1cover, {\r\n            opacity: 0.3\r\n        });\r\n        const dropdownBoxBottomShape1S = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight + 30\r\n        });\r\n        const dropdownBoxBottomShape1SText = Dom.svg('text', {\r\n            class: 'sqd-task-text',\r\n            x: containerWidths[0] - 5,\r\n            y: 2.35 * boxHeight + 30,\r\n        });\r\n        dropdownBoxBottomShape1SText.textContent = 'Multiple ';\r\n        const dropdownBoxBottomShape1Scover = Dom.svg('rect', {\r\n            width: 60,\r\n            height: 15,\r\n            class: 'option select-field choice',\r\n            fill: \"#fff\",\r\n            stroke: \"#a0a0a0\",\r\n            x: containerWidths[0] - 5,\r\n            y: 2.2 * boxHeight + 30,\r\n            id: `dropdownBoxBottomShape1Scover${Date.now()}`\r\n        });\r\n        Dom.attrs(dropdownBoxBottomShape1Scover, {\r\n            opacity: 0.3\r\n        });\r\n        const gSubDropdownboxPop = Dom.svg('g', {\r\n            class: `sqd-task-group sub-dropdownbox-pop sqd-hidden`\r\n        });\r\n        const gSubDropdownbox1Pop = Dom.svg('g', {\r\n            class: `sqd-task-group sub-dropdownbox-pop sqd-hidden`\r\n        });\r\n        gSubDropdownboxPop.appendChild(dropdownBoxBottomShapeText);\r\n        gSubDropdownboxPop.insertBefore(dropdownBoxBottomShape, dropdownBoxBottomShapeText);\r\n        gSubDropdownboxPop.appendChild(dropdownBoxBottomShapecover);\r\n        gSubDropdownboxPop.appendChild(dropdownBoxBottomShapeSText);\r\n        gSubDropdownboxPop.insertBefore(dropdownBoxBottomShapeS, dropdownBoxBottomShapeSText);\r\n        gSubDropdownboxPop.appendChild(dropdownBoxBottomShapeScover);\r\n        gSubDropdownbox1Pop.appendChild(dropdownBoxBottomShape1Text);\r\n        gSubDropdownbox1Pop.insertBefore(dropdownBoxBottomShape1, dropdownBoxBottomShape1Text);\r\n        gSubDropdownbox1Pop.appendChild(dropdownBoxBottomShape1cover);\r\n        gSubDropdownbox1Pop.appendChild(dropdownBoxBottomShape1SText);\r\n        gSubDropdownbox1Pop.insertBefore(dropdownBoxBottomShape1S, dropdownBoxBottomShape1SText);\r\n        gSubDropdownbox1Pop.appendChild(dropdownBoxBottomShape1Scover);\r\n        gSubDropdownbox.appendChild(dropdownRightButton);\r\n        gSubDropdownbox.insertBefore(dropdownBoxShape, dropdownRightButton);\r\n        gSubDropdownbox.appendChild(dropdownBoxInnerText);\r\n        gSubDropdownbox.appendChild(dropdownBoxShapeAfter);\r\n        gSubDropdown.appendChild(gSubDropdownbox);\r\n        gSubDropdown.appendChild(gSubDropdownboxPop);\r\n        gSubDropdownbox1.appendChild(dropdownRightButton1);\r\n        gSubDropdownbox1.insertBefore(dropdownBoxShape1, dropdownRightButton1);\r\n        gSubDropdownbox1.appendChild(dropdownBoxInnerText1);\r\n        gSubDropdownbox1.appendChild(dropdownBoxShape1After);\r\n        gSubDropdown1.appendChild(gSubDropdownbox1);\r\n        gSubDropdown1.appendChild(gSubDropdownbox1Pop);\r\n        gRightPop3.appendChild(icon1);\r\n        gRightPop3.appendChild(icon2);\r\n        gRightPop3.appendChild(icon3);\r\n        g1.appendChild(icon);\r\n        g1.appendChild(moreIcon);\r\n        g.appendChild(g1);\r\n        g.appendChild(gRightPop3);\r\n        g.appendChild(gDropdown);\r\n        g.appendChild(gSubDropdown1);\r\n        g.appendChild(gSubDropdown);\r\n        // Add EventListeners\r\n        moreIcon.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gRightPop3.classList.toggle('sqd-hidden');\r\n        });\r\n        // Copy\r\n        icon1.addEventListener('click', function () {\r\n            console.log(\"copy if/else\");\r\n            console.log(configuration);\r\n        });\r\n        // Delete\r\n        icon2.addEventListener('click', function () {\r\n            console.log(\"delete if/else\");\r\n        });\r\n        // Edit\r\n        icon3.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gDropdown.classList.toggle('sqd-hidden');\r\n            gSubDropdown.classList.toggle('sqd-hidden');\r\n            gSubDropdown1.classList.toggle('sqd-hidden');\r\n        });\r\n        // Show options\r\n        gSubDropdown.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gSubDropdownbox.classList.toggle('sqd-hidden');\r\n        });\r\n        gSubDropdown1.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gSubDropdownbox1.classList.toggle('sqd-hidden');\r\n        });\r\n        gSubDropdownbox.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gSubDropdownboxPop.classList.toggle('sqd-hidden');\r\n        });\r\n        gSubDropdownbox1.addEventListener('click', function (e) {\r\n            e.stopPropagation();\r\n            gSubDropdownbox1Pop.classList.toggle('sqd-hidden');\r\n        });\r\n        JoinView.createStraightJoin(g, new Vector(containerWidths[0], 0), PADDING_TOP + boxHeight);\r\n        JoinView.createJoins(g, new Vector(containerWidths[0], PADDING_TOP + LABEL_HEIGHT + boxHeight / 2), containerOffsets.map((o, i) => new Vector(o + joinXs[i] + PADDING_X, PADDING_TOP + LABEL_HEIGHT + CONNECTION_HEIGHT + boxHeight / 2)));\r\n        const inputView = InputView.createRoundInput(g, containerWidths[0], 0);\r\n        const regionView = RegionView.create(g, containerWidths, containerHeight);\r\n        const validationErrorView = ValidationErrorView.create(g, containersWidth, 0);\r\n        return new SwitchStepComponentView(g, containersWidth, containerHeight, containerWidths[0], sequenceComponents, regionView, inputView, validationErrorView);\r\n    }\r\n    getClientPosition() {\r\n        return this.regionView.getClientPosition();\r\n    }\r\n    containsElement(element) {\r\n        return this.g.contains(element);\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.inputView.setIsHidden(isDragging);\r\n    }\r\n    setIsSelected(isSelected) {\r\n        this.regionView.setIsSelected(isSelected);\r\n    }\r\n    setIsDisabled(isDisabled) {\r\n        Dom.toggleClass(this.g, isDisabled, 'sqd-disabled');\r\n    }\r\n    setIsValid(isValid) {\r\n        this.validationErrorView.setIsHidden(isValid);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/join-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/label-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/region-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/validation-error-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/input-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-component.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/switch-step/switch-step-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { SwitchStep } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { ComponentView } from '../component';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nexport declare class SwitchStepComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly sequenceComponents: SequenceComponent[];\r\n    private readonly regionView;\r\n    private readonly inputView;\r\n    private readonly validationErrorView;\r\n    static create(parent: SVGElement, step: SwitchStep, configuration: StepsConfiguration): SwitchStepComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    containsElement(element: Element): boolean;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    setIsValid(isValid: boolean): void;\r\n}\r\n"}}
