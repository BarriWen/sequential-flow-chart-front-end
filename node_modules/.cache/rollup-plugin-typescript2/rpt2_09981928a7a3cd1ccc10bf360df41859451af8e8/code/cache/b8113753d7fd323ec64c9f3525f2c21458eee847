{"code":"import { StartComponentView } from './start-component-view';\r\nexport class StartComponent {\r\n    constructor(view) {\r\n        this.view = view;\r\n    }\r\n    static create(parent, sequence, configuration) {\r\n        const view = StartComponentView.create(parent, sequence, configuration);\r\n        return new StartComponent(view);\r\n    }\r\n    findByElement(element) {\r\n        return this.view.component.findByElement(element);\r\n    }\r\n    findById(stepId) {\r\n        return this.view.component.findById(stepId);\r\n    }\r\n    getPlaceholders(result) {\r\n        this.view.component.getPlaceholders(result);\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.view.component.setIsDragging(isDragging);\r\n    }\r\n    validate() {\r\n        return this.view.component.validate();\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/start-stop/start-component-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/workspace/start-stop/start-component.d.ts","writeByteOrderMark":false,"text":"import { Sequence } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { Component, Placeholder, StepComponent } from '../component';\r\nimport { StartComponentView } from './start-component-view';\r\nexport declare class StartComponent implements Component {\r\n    readonly view: StartComponentView;\r\n    static create(parent: SVGElement, sequence: Sequence, configuration: StepsConfiguration): StartComponent;\r\n    private constructor();\r\n    findByElement(element: Element): StepComponent | null;\r\n    findById(stepId: string): StepComponent | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    validate(): boolean;\r\n}\r\n"}}
