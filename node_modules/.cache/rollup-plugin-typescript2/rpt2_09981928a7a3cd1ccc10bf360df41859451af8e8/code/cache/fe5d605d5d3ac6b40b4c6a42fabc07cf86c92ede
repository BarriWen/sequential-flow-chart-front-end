{"code":"import { BehaviorController } from './behaviors/behavior-controller';\r\nimport { ObjectCloner } from './core/object-cloner';\r\nimport { SimpleEvent } from './core/simple-event';\r\nimport { DesignerContext } from './designer-context';\r\nimport { DesignerView } from './designer-view';\r\nimport { LayoutController } from './layout-controller';\r\nimport { Utils } from './utils';\r\nexport default class Designer {\r\n    constructor(view, context) {\r\n        this.view = view;\r\n        this.context = context;\r\n        this.onDefinitionChanged = new SimpleEvent();\r\n    }\r\n    static create(parent, startDefinition, configuration) {\r\n        // Generate a unique ID for every journey\r\n        if (startDefinition.properties.journeyId == \"\") {\r\n            startDefinition.properties.journeyId = Utils.nextId();\r\n        }\r\n        const definition = ObjectCloner.deepClone(startDefinition);\r\n        const behaviorController = new BehaviorController();\r\n        const layoutController = new LayoutController(parent);\r\n        const isMobile = layoutController.isMobile();\r\n        const context = new DesignerContext(definition, behaviorController, layoutController, configuration, isMobile, isMobile);\r\n        const view = DesignerView.create(parent, context, configuration);\r\n        const designer = new Designer(view, context);\r\n        view.bindKeyUp(e => designer.onKeyUp(e));\r\n        context.onDefinitionChanged.subscribe(() => designer.onDefinitionChanged.forward(context.definition));\r\n        return designer;\r\n    }\r\n    getDefinition() {\r\n        return this.context.definition;\r\n    }\r\n    isValid() {\r\n        return this.view.workspace.isValid;\r\n    }\r\n    isReadonly() {\r\n        return this.context.isReadonly;\r\n    }\r\n    setIsReadonly(isReadonly) {\r\n        this.context.setIsReadonly(isReadonly);\r\n    }\r\n    getSelectedStepId() {\r\n        var _a;\r\n        return ((_a = this.context.selectedStep) === null || _a === void 0 ? void 0 : _a.id) || null;\r\n    }\r\n    selectStepById(stepId) {\r\n        this.context.selectStepById(stepId);\r\n    }\r\n    clearSelectedStep() {\r\n        this.context.setSelectedStep(null);\r\n    }\r\n    moveViewPortToStep(stepId) {\r\n        this.context.moveViewPortToStep(stepId);\r\n    }\r\n    destroy() {\r\n        this.view.destroy();\r\n    }\r\n    onKeyUp(e) {\r\n        const supportedKeys = ['Backspace', 'Delete'];\r\n        if (!supportedKeys.includes(e.key)) {\r\n            return;\r\n        }\r\n        const ignoreTagNames = ['input', 'textarea'];\r\n        if (document.activeElement && ignoreTagNames.includes(document.activeElement.tagName.toLowerCase())) {\r\n            return;\r\n        }\r\n        if (!this.context.selectedStep || this.context.isReadonly || this.context.isDragging) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.context.tryDeleteStep(this.context.selectedStep);\r\n    }\r\n}\r\nDesigner.utils = Utils;\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/behavior-controller.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/object-cloner.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/simple-event.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/layout-controller.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/utils.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/src/designer.d.ts","writeByteOrderMark":false,"text":"import { SimpleEvent } from './core/simple-event';\r\nimport { Definition } from './definition';\r\nimport { DesignerConfiguration } from './designer-configuration';\r\nimport { Utils } from './utils';\r\nexport default class Designer {\r\n    private readonly view;\r\n    private readonly context;\r\n    static readonly utils: typeof Utils;\r\n    static create(parent: HTMLElement, startDefinition: Definition, configuration: DesignerConfiguration): Designer;\r\n    private constructor();\r\n    readonly onDefinitionChanged: SimpleEvent<Definition>;\r\n    getDefinition(): Definition;\r\n    isValid(): boolean;\r\n    isReadonly(): boolean;\r\n    setIsReadonly(isReadonly: boolean): void;\r\n    getSelectedStepId(): string | null;\r\n    selectStepById(stepId: string): void;\r\n    clearSelectedStep(): void;\r\n    moveViewPortToStep(stepId: string): void;\r\n    destroy(): void;\r\n    private onKeyUp;\r\n}\r\n"}}
