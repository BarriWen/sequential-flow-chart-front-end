{"code":"import { Vector } from '../core/vector';\r\nimport { StepComponentState } from '../workspace/component';\r\nimport { DragStepView } from './drag-step-behavior-view';\r\nimport { PlaceholderFinder } from './placeholder-finder';\r\nexport class DragStepBehavior {\r\n    constructor(view, context, step, movingStepComponent) {\r\n        this.view = view;\r\n        this.context = context;\r\n        this.step = step;\r\n        this.movingStepComponent = movingStepComponent;\r\n    }\r\n    static create(context, step, movingStepComponent) {\r\n        const view = DragStepView.create(step, context.configuration);\r\n        return new DragStepBehavior(view, context, step, movingStepComponent);\r\n    }\r\n    onStart(position) {\r\n        let offset;\r\n        if (this.movingStepComponent) {\r\n            this.movingStepComponent.setState(StepComponentState.dragging);\r\n            const clientPosition = this.movingStepComponent.view.getClientPosition();\r\n            offset = position.subtract(clientPosition);\r\n        }\r\n        else {\r\n            offset = new Vector(this.view.width / 2, this.view.height / 2);\r\n        }\r\n        this.view.setPosition(position.subtract(offset));\r\n        this.context.setIsDragging(true);\r\n        this.state = {\r\n            startPosition: position,\r\n            finder: PlaceholderFinder.create(this.context.getPlaceholders(), this.context),\r\n            offset\r\n        };\r\n    }\r\n    onMove(delta) {\r\n        if (this.state) {\r\n            const newPosition = this.state.startPosition.subtract(delta).subtract(this.state.offset);\r\n            this.view.setPosition(newPosition);\r\n            const placeholder = this.state.finder.find(newPosition, this.view.width, this.view.height);\r\n            if (this.currentPlaceholder !== placeholder) {\r\n                if (this.currentPlaceholder) {\r\n                    this.currentPlaceholder.setIsHover(false);\r\n                }\r\n                if (placeholder) {\r\n                    placeholder.setIsHover(true);\r\n                }\r\n                this.currentPlaceholder = placeholder;\r\n            }\r\n        }\r\n    }\r\n    onEnd(interrupt) {\r\n        if (!this.state) {\r\n            throw new Error('Invalid state');\r\n        }\r\n        this.state.finder.destroy();\r\n        this.state = undefined;\r\n        this.view.remove();\r\n        this.context.setIsDragging(false);\r\n        let modified = false;\r\n        if (!interrupt && this.currentPlaceholder) {\r\n            if (this.movingStepComponent) {\r\n                modified = this.context.tryMoveStep(this.movingStepComponent.parentSequence, this.movingStepComponent.step, this.currentPlaceholder.parentSequence, this.currentPlaceholder.index);\r\n            }\r\n            else {\r\n                modified = this.context.tryInsertStep(this.step, this.currentPlaceholder.parentSequence, this.currentPlaceholder.index);\r\n            }\r\n        }\r\n        if (!modified) {\r\n            if (this.movingStepComponent) {\r\n                this.movingStepComponent.setState(StepComponentState.default);\r\n            }\r\n            if (this.currentPlaceholder) {\r\n                this.currentPlaceholder.setIsHover(false);\r\n            }\r\n        }\r\n        this.currentPlaceholder = undefined;\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/behavior.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/drag-step-behavior-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/behaviors/placeholder-finder.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/behaviors/drag-step-behavior.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Step } from '../definition';\r\nimport { DesignerContext } from '../designer-context';\r\nimport { StepComponent } from '../workspace/component';\r\nimport { Behavior } from './behavior';\r\nexport declare class DragStepBehavior implements Behavior {\r\n    private readonly view;\r\n    private readonly context;\r\n    private readonly step;\r\n    private readonly movingStepComponent?;\r\n    static create(context: DesignerContext, step: Step, movingStepComponent?: StepComponent): DragStepBehavior;\r\n    private state?;\r\n    private currentPlaceholder?;\r\n    private constructor();\r\n    onStart(position: Vector): void;\r\n    onMove(delta: Vector): void;\r\n    onEnd(interrupt: boolean): void;\r\n}\r\n"}}
