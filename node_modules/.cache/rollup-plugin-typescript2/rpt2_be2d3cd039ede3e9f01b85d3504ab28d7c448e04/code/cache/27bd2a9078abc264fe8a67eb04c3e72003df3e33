{"code":"export class SimpleEvent {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    subscribe(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    unsubscribe(listener) {\r\n        const index = this.listeners.indexOf(listener);\r\n        if (index >= 0) {\r\n            this.listeners.splice(index, 1);\r\n        }\r\n        else {\r\n            throw new Error('Unknown listener');\r\n        }\r\n    }\r\n    forward(value) {\r\n        if (this.listeners.length > 0) {\r\n            this.listeners.forEach(listener => listener(value));\r\n        }\r\n    }\r\n    count() {\r\n        return this.listeners.length;\r\n    }\r\n}\r\n","references":[],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/core/simple-event.d.ts","writeByteOrderMark":false,"text":"export declare class SimpleEvent<T> {\r\n    private readonly listeners;\r\n    subscribe(listener: SimpleEventListener<T>): void;\r\n    unsubscribe(listener: SimpleEventListener<T>): void;\r\n    forward(value: T): void;\r\n    count(): number;\r\n}\r\nexport declare type SimpleEventListener<T> = (value: T) => void;\r\n"}}
