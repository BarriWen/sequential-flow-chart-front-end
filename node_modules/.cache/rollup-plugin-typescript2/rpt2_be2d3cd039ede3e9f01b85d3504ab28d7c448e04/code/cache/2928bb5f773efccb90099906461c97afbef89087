{"code":"import { ControlBar } from './control-bar/control-bar';\r\nimport { Dom } from './core/dom';\r\nimport { SmartEditor } from './smart-editor/smart-editor';\r\nimport { Toolbox } from './toolbox/toolbox';\r\nimport { Workspace } from './workspace/workspace';\r\nexport class DesignerView {\r\n    constructor(root, layoutController, workspace, toolbox) {\r\n        this.root = root;\r\n        this.layoutController = layoutController;\r\n        this.workspace = workspace;\r\n        this.toolbox = toolbox;\r\n        this.onResizeHandler = () => this.onResize();\r\n        this.onKeyUpHandlers = [];\r\n    }\r\n    static create(parent, context, configuration) {\r\n        const theme = configuration.theme || 'light';\r\n        const root = Dom.element('div', {\r\n            class: `sqd-designer sqd-theme-${theme}`\r\n        });\r\n        parent.appendChild(root);\r\n        const workspace = Workspace.create(root, context);\r\n        let toolbox = undefined;\r\n        if (!configuration.toolbox.isHidden) {\r\n            toolbox = Toolbox.create(root, context);\r\n        }\r\n        ControlBar.create(root, context);\r\n        if (!configuration.editors.isHidden) {\r\n            SmartEditor.create(root, context);\r\n        }\r\n        const view = new DesignerView(root, context.layoutController, workspace, toolbox);\r\n        view.reloadLayout();\r\n        window.addEventListener('resize', view.onResizeHandler, false);\r\n        return view;\r\n    }\r\n    bindKeyUp(handler) {\r\n        document.addEventListener('keyup', handler, false);\r\n        this.onKeyUpHandlers.push(handler);\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        window.removeEventListener('resize', this.onResizeHandler, false);\r\n        this.onKeyUpHandlers.forEach(h => document.removeEventListener('keyup', h, false));\r\n        this.workspace.destroy();\r\n        (_a = this.toolbox) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        (_b = this.root.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this.root);\r\n    }\r\n    onResize() {\r\n        this.reloadLayout();\r\n    }\r\n    reloadLayout() {\r\n        const isMobile = this.layoutController.isMobile();\r\n        Dom.toggleClass(this.root, !isMobile, 'sqd-layout-desktop');\r\n        Dom.toggleClass(this.root, isMobile, 'sqd-layout-mobile');\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/control-bar/control-bar.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/layout-controller.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/smart-editor/smart-editor.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/toolbox.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/workspace.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/designer-view.d.ts","writeByteOrderMark":false,"text":"import { DesignerConfiguration } from './designer-configuration';\r\nimport { DesignerContext } from './designer-context';\r\nimport { LayoutController } from './layout-controller';\r\nimport { Toolbox } from './toolbox/toolbox';\r\nimport { Workspace } from './workspace/workspace';\r\nexport declare class DesignerView {\r\n    private readonly root;\r\n    private readonly layoutController;\r\n    readonly workspace: Workspace;\r\n    private readonly toolbox?;\r\n    static create(parent: HTMLElement, context: DesignerContext, configuration: DesignerConfiguration): DesignerView;\r\n    private readonly onResizeHandler;\r\n    private readonly onKeyUpHandlers;\r\n    constructor(root: HTMLElement, layoutController: LayoutController, workspace: Workspace, toolbox?: Toolbox | undefined);\r\n    bindKeyUp(handler: KeyUpHandler): void;\r\n    destroy(): void;\r\n    private onResize;\r\n    private reloadLayout;\r\n}\r\nexport declare type KeyUpHandler = (e: KeyboardEvent) => void;\r\n"}}
