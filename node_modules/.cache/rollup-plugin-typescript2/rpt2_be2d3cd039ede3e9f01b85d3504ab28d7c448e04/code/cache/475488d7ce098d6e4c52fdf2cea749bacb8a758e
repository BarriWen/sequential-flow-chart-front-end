{"code":"import { Dom } from '../core/dom';\r\nimport { Icons } from '../core/icons';\r\nimport { ScrollBoxView } from './scrollbox-view';\r\nimport { ToolboxItem } from './toolbox-item';\r\nexport class ToolboxView {\r\n    constructor(header, headerToggleIcon, body, filterInput, scrollboxView, context) {\r\n        this.header = header;\r\n        this.headerToggleIcon = headerToggleIcon;\r\n        this.body = body;\r\n        this.filterInput = filterInput;\r\n        this.scrollboxView = scrollboxView;\r\n        this.context = context;\r\n    }\r\n    static create(parent, context) {\r\n        const root = Dom.element('div', {\r\n            class: 'sqd-toolbox'\r\n        });\r\n        const header = Dom.element('div', {\r\n            class: 'sqd-toolbox-header'\r\n        });\r\n        const headerTitle = Dom.element('div', {\r\n            class: 'sqd-toolbox-header-title'\r\n        });\r\n        headerTitle.innerText = 'Toolbox';\r\n        const headerToggleIcon = Icons.create('sqd-toolbox-toggle-icon');\r\n        const body = Dom.element('div', {\r\n            class: 'sqd-toolbox-body'\r\n        });\r\n        const filterInput = Dom.element('input', {\r\n            class: 'sqd-toolbox-filter',\r\n            type: 'text',\r\n            placeholder: 'Search...'\r\n        });\r\n        root.appendChild(header);\r\n        root.appendChild(body);\r\n        header.appendChild(headerTitle);\r\n        header.appendChild(headerToggleIcon);\r\n        body.appendChild(filterInput);\r\n        parent.appendChild(root);\r\n        const scrollboxView = ScrollBoxView.create(body, parent);\r\n        return new ToolboxView(header, headerToggleIcon, body, filterInput, scrollboxView, context);\r\n    }\r\n    bindToggleIsCollapsedClick(handler) {\r\n        function forward(e) {\r\n            e.preventDefault();\r\n            handler();\r\n        }\r\n        this.header.addEventListener('click', forward, false);\r\n    }\r\n    bindFilterInputChange(handler) {\r\n        function forward(e) {\r\n            handler(e.target.value);\r\n        }\r\n        this.filterInput.addEventListener('keyup', forward, false);\r\n        this.filterInput.addEventListener('blur', forward, false);\r\n    }\r\n    setIsCollapsed(isCollapsed) {\r\n        Dom.toggleClass(this.body, isCollapsed, 'sqd-hidden');\r\n        this.headerToggleIcon.innerHTML = isCollapsed ? Icons.arrowDown : Icons.close;\r\n        if (!isCollapsed) {\r\n            this.scrollboxView.refresh();\r\n        }\r\n    }\r\n    setGroups(groups) {\r\n        const list = Dom.element('div');\r\n        groups.forEach(group => {\r\n            const groupTitle = Dom.element('div', {\r\n                class: 'sqd-toolbox-group-title'\r\n            });\r\n            groupTitle.innerText = group.name;\r\n            list.appendChild(groupTitle);\r\n            group.steps.forEach(s => ToolboxItem.create(list, s, this.context));\r\n        });\r\n        this.scrollboxView.setContent(list);\r\n    }\r\n    destroy() {\r\n        this.scrollboxView.destroy();\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/icons.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/scrollbox-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/toolbox-item.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/toolbox/toolbox-view.d.ts","writeByteOrderMark":false,"text":"import { ToolboxGroupConfiguration } from '../designer-configuration';\r\nimport { DesignerContext } from '../designer-context';\r\nexport declare class ToolboxView {\r\n    private readonly header;\r\n    private readonly headerToggleIcon;\r\n    private readonly body;\r\n    private readonly filterInput;\r\n    private readonly scrollboxView;\r\n    private readonly context;\r\n    static create(parent: HTMLElement, context: DesignerContext): ToolboxView;\r\n    private constructor();\r\n    bindToggleIsCollapsedClick(handler: () => void): void;\r\n    bindFilterInputChange(handler: (value: string) => void): void;\r\n    setIsCollapsed(isCollapsed: boolean): void;\r\n    setGroups(groups: ToolboxGroupConfiguration[]): void;\r\n    destroy(): void;\r\n}\r\n"}}
