{"code":"import { ToolboxView } from './toolbox-view';\r\nexport class Toolbox {\r\n    constructor(view, context) {\r\n        this.view = view;\r\n        this.context = context;\r\n    }\r\n    static create(parent, context) {\r\n        const view = ToolboxView.create(parent, context);\r\n        view.setIsCollapsed(context.isToolboxCollapsed);\r\n        const toolbox = new Toolbox(view, context);\r\n        toolbox.render();\r\n        context.onIsToolboxCollapsedChanged.subscribe(ic => toolbox.onIsToolboxCollapsedChanged(ic));\r\n        view.bindToggleIsCollapsedClick(() => toolbox.toggleIsCollapsedClick());\r\n        view.bindFilterInputChange(v => toolbox.onFilterInputChanged(v));\r\n        return toolbox;\r\n    }\r\n    destroy() {\r\n        this.view.destroy();\r\n    }\r\n    render() {\r\n        const groups = this.context.configuration.toolbox.groups\r\n            .map(g => {\r\n            return {\r\n                name: g.name,\r\n                steps: g.steps.filter(s => {\r\n                    return this.filter ? s.name.toLowerCase().includes(this.filter) : true;\r\n                })\r\n            };\r\n        })\r\n            .filter(g => g.steps.length > 0);\r\n        this.view.setGroups(groups);\r\n    }\r\n    toggleIsCollapsedClick() {\r\n        this.context.toggleIsToolboxCollapsed();\r\n    }\r\n    onIsToolboxCollapsedChanged(isCollapsed) {\r\n        this.view.setIsCollapsed(isCollapsed);\r\n    }\r\n    onFilterInputChanged(value) {\r\n        this.filter = value.toLowerCase();\r\n        this.render();\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-context.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/toolbox/toolbox-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/toolbox/toolbox.d.ts","writeByteOrderMark":false,"text":"import { DesignerContext } from '../designer-context';\r\nexport declare class Toolbox {\r\n    private readonly view;\r\n    private readonly context;\r\n    static create(parent: HTMLElement, context: DesignerContext): Toolbox;\r\n    private filter?;\r\n    private constructor();\r\n    destroy(): void;\r\n    private render;\r\n    private toggleIsCollapsedClick;\r\n    private onIsToolboxCollapsedChanged;\r\n    private onFilterInputChanged;\r\n}\r\n"}}
