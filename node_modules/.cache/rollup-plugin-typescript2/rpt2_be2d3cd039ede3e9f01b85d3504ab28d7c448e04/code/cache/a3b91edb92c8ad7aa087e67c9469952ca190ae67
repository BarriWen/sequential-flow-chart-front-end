{"code":"import { Dom } from '../core/dom';\r\nimport { readMousePosition, readTouchPosition } from '../core/event-readers';\r\nimport { Vector } from '../core/vector';\r\nimport { StartStopComponent } from './start-stop/start-stop-component';\r\nconst GRID_SIZE = 48;\r\nlet lastGridPatternId = 0;\r\nexport class WorkspaceView {\r\n    constructor(workspace, canvas, gridPattern, gridPatternPath, foreground, configuration) {\r\n        this.workspace = workspace;\r\n        this.canvas = canvas;\r\n        this.gridPattern = gridPattern;\r\n        this.gridPatternPath = gridPatternPath;\r\n        this.foreground = foreground;\r\n        this.configuration = configuration;\r\n        this.onResizeHandler = () => this.onResize();\r\n    }\r\n    static create(parent, configuration) {\r\n        const defs = Dom.svg('defs');\r\n        const gridPatternId = 'sqd-grid-pattern-' + lastGridPatternId++;\r\n        const gridPattern = Dom.svg('pattern', {\r\n            id: gridPatternId,\r\n            patternUnits: 'userSpaceOnUse'\r\n        });\r\n        const gridPatternPath = Dom.svg('path', {\r\n            class: 'sqd-grid-path',\r\n            fill: 'none'\r\n        });\r\n        defs.appendChild(gridPattern);\r\n        gridPattern.appendChild(gridPatternPath);\r\n        const foreground = Dom.svg('g');\r\n        const workspace = Dom.element('div', {\r\n            class: 'sqd-workspace'\r\n        });\r\n        const canvas = Dom.svg('svg', {\r\n            class: 'sqd-workspace-canvas'\r\n        });\r\n        canvas.appendChild(defs);\r\n        canvas.appendChild(Dom.svg('rect', {\r\n            width: '100%',\r\n            height: '100%',\r\n            fill: `url(#${gridPatternId})`\r\n        }));\r\n        canvas.appendChild(foreground);\r\n        workspace.appendChild(canvas);\r\n        parent.appendChild(workspace);\r\n        const view = new WorkspaceView(workspace, canvas, gridPattern, gridPatternPath, foreground, configuration);\r\n        window.addEventListener('resize', view.onResizeHandler, false);\r\n        return view;\r\n    }\r\n    render(sequence) {\r\n        if (this.rootComponent) {\r\n            this.rootComponent.view.destroy();\r\n        }\r\n        this.rootComponent = StartStopComponent.create(this.foreground, sequence, this.configuration);\r\n        this.refreshSize();\r\n    }\r\n    setPositionAndScale(position, scale) {\r\n        const gridSize = GRID_SIZE * scale;\r\n        Dom.attrs(this.gridPattern, {\r\n            x: position.x,\r\n            y: position.y,\r\n            width: gridSize,\r\n            height: gridSize\r\n        });\r\n        Dom.attrs(this.gridPatternPath, {\r\n            d: `M ${gridSize} 0 L 0 0 0 ${gridSize}`\r\n        });\r\n        Dom.attrs(this.foreground, {\r\n            transform: `translate(${position.x}, ${position.y}) scale(${scale})`\r\n        });\r\n    }\r\n    getClientPosition() {\r\n        const rect = this.canvas.getBoundingClientRect();\r\n        return new Vector(rect.x, rect.y);\r\n    }\r\n    getClientSize() {\r\n        return new Vector(this.canvas.clientWidth, this.canvas.clientHeight);\r\n    }\r\n    bindMouseDown(handler) {\r\n        this.canvas.addEventListener('mousedown', e => handler(readMousePosition(e), e.target, e.button), false);\r\n    }\r\n    bindTouchStart(handler) {\r\n        this.canvas.addEventListener('touchstart', e => {\r\n            e.preventDefault();\r\n            handler(readTouchPosition(e));\r\n        }, false);\r\n    }\r\n    bindContextMenu(handler) {\r\n        this.canvas.addEventListener('contextmenu', handler, false);\r\n    }\r\n    bindWheel(handler) {\r\n        this.canvas.addEventListener('wheel', handler, false);\r\n    }\r\n    destroy() {\r\n        window.removeEventListener('resize', this.onResizeHandler, false);\r\n    }\r\n    refreshSize() {\r\n        Dom.attrs(this.canvas, {\r\n            width: this.workspace.offsetWidth,\r\n            height: this.workspace.offsetHeight\r\n        });\r\n    }\r\n    onResize() {\r\n        this.refreshSize();\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/event-readers.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/start-stop/start-stop-component.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/workspace/workspace-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../core/vector';\r\nimport { Sequence } from '../definition';\r\nimport { StepsConfiguration } from '../designer-configuration';\r\nimport { StartStopComponent } from './start-stop/start-stop-component';\r\nexport declare class WorkspaceView {\r\n    private readonly workspace;\r\n    private readonly canvas;\r\n    private readonly gridPattern;\r\n    private readonly gridPatternPath;\r\n    private readonly foreground;\r\n    private readonly configuration;\r\n    static create(parent: HTMLElement, configuration: StepsConfiguration): WorkspaceView;\r\n    private onResizeHandler;\r\n    rootComponent?: StartStopComponent;\r\n    private constructor();\r\n    render(sequence: Sequence): void;\r\n    setPositionAndScale(position: Vector, scale: number): void;\r\n    getClientPosition(): Vector;\r\n    getClientSize(): Vector;\r\n    bindMouseDown(handler: (position: Vector, target: Element, button: number) => void): void;\r\n    bindTouchStart(handler: (position: Vector) => void): void;\r\n    bindContextMenu(handler: (e: MouseEvent) => void): void;\r\n    bindWheel(handler: (e: WheelEvent) => void): void;\r\n    destroy(): void;\r\n    refreshSize(): void;\r\n    private onResize;\r\n}\r\n"}}
