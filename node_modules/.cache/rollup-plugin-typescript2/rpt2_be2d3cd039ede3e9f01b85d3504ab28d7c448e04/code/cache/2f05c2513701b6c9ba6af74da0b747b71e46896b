{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { JoinView } from '../common-views/join-view';\r\nimport { StepComponentFactory } from '../step-component-factory';\r\nconst PH_WIDTH = 100;\r\nconst PH_HEIGHT = 24;\r\nexport class SequenceComponentView {\r\n    constructor(g, width, height, joinX, placeholders, components) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.placeholders = placeholders;\r\n        this.components = components;\r\n    }\r\n    static create(parent, sequence, configuration) {\r\n        const g = Dom.svg('g');\r\n        parent.appendChild(g);\r\n        const components = sequence.map(s => StepComponentFactory.create(g, s, sequence, configuration));\r\n        const maxJoinX = components.length > 0 ? Math.max(...components.map(c => c.view.joinX)) : PH_WIDTH / 2;\r\n        const maxWidth = components.length > 0 ? Math.max(...components.map(c => c.view.width)) : PH_WIDTH;\r\n        let offsetY = PH_HEIGHT;\r\n        const placeholders = [];\r\n        for (let i = 0; i < components.length; i++) {\r\n            const component = components[i];\r\n            const offsetX = maxJoinX - component.view.joinX;\r\n            JoinView.createStraightJoin(g, new Vector(maxJoinX, offsetY - PH_HEIGHT), PH_HEIGHT);\r\n            placeholders.push(appendPlaceholder(g, maxJoinX - PH_WIDTH / 2, offsetY - PH_HEIGHT));\r\n            Dom.translate(component.view.g, offsetX, offsetY);\r\n            offsetY += component.view.height + PH_HEIGHT;\r\n        }\r\n        // Changed to remove the join line of stop point\r\n        JoinView.createStraightJoin(g, new Vector(maxJoinX, offsetY - PH_HEIGHT), PH_HEIGHT);\r\n        placeholders.push(appendPlaceholder(g, maxJoinX - PH_WIDTH / 2, offsetY - PH_HEIGHT));\r\n        return new SequenceComponentView(g, maxWidth, offsetY, maxJoinX, placeholders, components);\r\n    }\r\n    getClientPosition() {\r\n        throw new Error('Not supported');\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.placeholders.forEach(p => {\r\n            Dom.attrs(p, {\r\n                visibility: isDragging ? 'visible' : 'hidden'\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction appendPlaceholder(g, x, y) {\r\n    const rect = Dom.svg('rect', {\r\n        class: 'sqd-placeholder',\r\n        width: PH_WIDTH,\r\n        height: PH_HEIGHT,\r\n        x,\r\n        y,\r\n        rx: 6,\r\n        ry: 6,\r\n        visibility: 'hidden'\r\n    });\r\n    g.appendChild(rect);\r\n    return rect;\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/join-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/step-component-factory.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/workspace/sequence/sequence-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { Sequence } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { Component, ComponentView } from '../component';\r\nexport declare class SequenceComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly placeholders: SVGElement[];\r\n    readonly components: Component[];\r\n    static create(parent: SVGElement, sequence: Sequence, configuration: StepsConfiguration): SequenceComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    setIsDragging(isDragging: boolean): void;\r\n}\r\n"}}
