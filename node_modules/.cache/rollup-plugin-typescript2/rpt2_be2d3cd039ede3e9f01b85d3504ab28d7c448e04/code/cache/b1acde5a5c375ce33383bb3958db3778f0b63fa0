{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { JoinView } from '../common-views//join-view';\r\nimport { LabelView } from '../common-views//label-view';\r\nimport { RegionView } from '../common-views//region-view';\r\nimport { ValidationErrorView } from '../common-views//validation-error-view';\r\nimport { InputView } from '../common-views/input-view';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nconst MIN_CHILDREN_WIDTH = 50;\r\nconst PADDING_X = 20;\r\nconst PADDING_TOP = 20;\r\nconst LABEL_HEIGHT = 22;\r\nconst CONNECTION_HEIGHT = 16;\r\nexport class SwitchStepComponentView {\r\n    constructor(g, width, height, joinX, sequenceComponents, regionView, inputView, validationErrorView) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.sequenceComponents = sequenceComponents;\r\n        this.regionView = regionView;\r\n        this.inputView = inputView;\r\n        this.validationErrorView = validationErrorView;\r\n    }\r\n    static create(parent, step, configuration) {\r\n        const g = Dom.svg('g', {\r\n            class: `sqd-switch-group sqd-type-${step.type}`\r\n        });\r\n        parent.appendChild(g);\r\n        const branchNames = Object.keys(step.branches);\r\n        const sequenceComponents = branchNames.map(bn => SequenceComponent.create(g, step.branches[bn], configuration));\r\n        const maxChildHeight = Math.max(...sequenceComponents.map(s => s.view.height));\r\n        const containerWidths = sequenceComponents.map(s => Math.max(s.view.width, MIN_CHILDREN_WIDTH) + PADDING_X * 2);\r\n        const containersWidth = containerWidths.reduce((p, c) => p + c, 0);\r\n        const containerHeight = maxChildHeight + PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT * 2;\r\n        const containerOffsets = [];\r\n        const joinXs = sequenceComponents.map(s => Math.max(s.view.joinX, MIN_CHILDREN_WIDTH / 2));\r\n        let totalX = 0;\r\n        for (let i = 0; i < branchNames.length; i++) {\r\n            containerOffsets.push(totalX);\r\n            totalX += containerWidths[i];\r\n        }\r\n        branchNames.forEach((branchName, i) => {\r\n            const sequence = sequenceComponents[i];\r\n            const offsetX = containerOffsets[i];\r\n            LabelView.create(g, offsetX + joinXs[i] + PADDING_X, PADDING_TOP + LABEL_HEIGHT + CONNECTION_HEIGHT, branchName, 'secondary');\r\n            const childEndY = PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT + sequence.view.height;\r\n            const fillingHeight = containerHeight - childEndY - CONNECTION_HEIGHT;\r\n            if (fillingHeight > 0) {\r\n                JoinView.createStraightJoin(g, new Vector(containerOffsets[i] + joinXs[i] + PADDING_X, childEndY), fillingHeight);\r\n            }\r\n            const sequenceX = offsetX + PADDING_X + Math.max((MIN_CHILDREN_WIDTH - sequence.view.width) / 2, 0);\r\n            const sequenceY = PADDING_TOP + LABEL_HEIGHT * 2 + CONNECTION_HEIGHT;\r\n            Dom.translate(sequence.view.g, sequenceX, sequenceY);\r\n        });\r\n        LabelView.create(g, containerWidths[0], PADDING_TOP, step.name);\r\n        JoinView.createStraightJoin(g, new Vector(containerWidths[0], 0), PADDING_TOP);\r\n        const iconUrl = configuration.iconUrlProvider ? configuration.iconUrlProvider(step.componentType, step.type) : null;\r\n        const inputView = InputView.createRectInput(g, containerWidths[0], 0, iconUrl);\r\n        JoinView.createJoins(g, new Vector(containerWidths[0], PADDING_TOP + LABEL_HEIGHT), containerOffsets.map((o, i) => new Vector(o + joinXs[i] + PADDING_X, PADDING_TOP + LABEL_HEIGHT + CONNECTION_HEIGHT)));\r\n        // JoinView.createJoins(\r\n        // \tg,\r\n        // \tnew Vector(containerWidths[0], containerHeight),\r\n        // \tcontainerOffsets.map(\r\n        // \t\t(o, i) => new Vector(o + joinXs[i] + PADDING_X, PADDING_TOP + CONNECTION_HEIGHT + LABEL_HEIGHT * 2 + maxChildHeight)\r\n        // \t)\r\n        // );\r\n        const regionView = RegionView.create(g, containerWidths, containerHeight);\r\n        const validationErrorView = ValidationErrorView.create(g, containersWidth, 0);\r\n        return new SwitchStepComponentView(g, containersWidth, containerHeight, containerWidths[0], sequenceComponents, regionView, inputView, validationErrorView);\r\n    }\r\n    getClientPosition() {\r\n        return this.regionView.getClientPosition();\r\n    }\r\n    containsElement(element) {\r\n        return this.g.contains(element);\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.inputView.setIsHidden(isDragging);\r\n    }\r\n    setIsSelected(isSelected) {\r\n        this.regionView.setIsSelected(isSelected);\r\n    }\r\n    setIsDisabled(isDisabled) {\r\n        Dom.toggleClass(this.g, isDisabled, 'sqd-disabled');\r\n    }\r\n    setIsValid(isValid) {\r\n        this.validationErrorView.setIsHidden(isValid);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/join-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/label-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/region-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/validation-error-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/input-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-component.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/workspace/switch-step/switch-step-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { SwitchStep } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { ComponentView } from '../component';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nexport declare class SwitchStepComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly sequenceComponents: SequenceComponent[];\r\n    private readonly regionView;\r\n    private readonly inputView;\r\n    private readonly validationErrorView;\r\n    static create(parent: SVGElement, step: SwitchStep, configuration: StepsConfiguration): SwitchStepComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    containsElement(element: Element): boolean;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    setIsValid(isValid: boolean): void;\r\n}\r\n"}}
