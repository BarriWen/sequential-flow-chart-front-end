{"code":"import { SequencePlaceholder } from './sequence-placeholder';\r\nimport { SequenceComponentView } from './sequence-component-view';\r\nexport class SequenceComponent {\r\n    constructor(view, sequence) {\r\n        this.view = view;\r\n        this.sequence = sequence;\r\n    }\r\n    static create(parent, sequence, configuration) {\r\n        const view = SequenceComponentView.create(parent, sequence, configuration);\r\n        return new SequenceComponent(view, sequence);\r\n    }\r\n    findByElement(element) {\r\n        for (const component of this.view.components) {\r\n            const sc = component.findByElement(element);\r\n            if (sc) {\r\n                return sc;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    findById(stepId) {\r\n        for (const component of this.view.components) {\r\n            const sc = component.findById(stepId);\r\n            if (sc) {\r\n                return sc;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getPlaceholders(result) {\r\n        this.view.placeholders.forEach((ph, index) => {\r\n            result.push(new SequencePlaceholder(ph, this.sequence, index));\r\n        });\r\n        this.view.components.forEach(c => c.getPlaceholders(result));\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.view.setIsDragging(isDragging);\r\n        this.view.components.forEach(c => c.setIsDragging(isDragging));\r\n    }\r\n    validate() {\r\n        let isValid = true;\r\n        for (const component of this.view.components) {\r\n            isValid = component.validate() && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-placeholder.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-component-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/workspace/sequence/sequence-component.d.ts","writeByteOrderMark":false,"text":"import { Sequence } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { Component, Placeholder, StepComponent } from '../component';\r\nimport { SequenceComponentView } from './sequence-component-view';\r\nexport declare class SequenceComponent implements Component {\r\n    readonly view: SequenceComponentView;\r\n    private readonly sequence;\r\n    static create(parent: SVGElement, sequence: Sequence, configuration: StepsConfiguration): SequenceComponent;\r\n    private constructor();\r\n    findByElement(element: Element): StepComponent | null;\r\n    findById(stepId: string): StepComponent | null;\r\n    getPlaceholders(result: Placeholder[]): void;\r\n    setIsDragging(isDragging: boolean): void;\r\n    validate(): boolean;\r\n}\r\n"}}
