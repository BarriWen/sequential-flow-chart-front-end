{"code":"import { Dom } from '../../core/dom';\r\nimport { Vector } from '../../core/vector';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nimport { InputView } from '../common-views/input-view';\r\nimport { JoinView } from '../common-views/join-view';\r\nimport { LabelView } from '../common-views/label-view';\r\nimport { RegionView } from '../common-views/region-view';\r\nimport { ValidationErrorView } from '../common-views/validation-error-view';\r\nconst PADDING_TOP = 20;\r\nconst PADDING_X = 20;\r\nconst LABEL_HEIGHT = 22;\r\nexport class ContainerStepComponentView {\r\n    constructor(g, width, height, joinX, sequenceComponent, inputView, regionView, validationErrorView) {\r\n        this.g = g;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.joinX = joinX;\r\n        this.sequenceComponent = sequenceComponent;\r\n        this.inputView = inputView;\r\n        this.regionView = regionView;\r\n        this.validationErrorView = validationErrorView;\r\n    }\r\n    static create(parent, step, configuration) {\r\n        const g = Dom.svg('g', {\r\n            class: `sqd-container-group sqd-type-${step.type}`\r\n        });\r\n        parent.appendChild(g);\r\n        const sequenceComponent = SequenceComponent.create(g, step.sequence, configuration);\r\n        Dom.translate(sequenceComponent.view.g, PADDING_X, PADDING_TOP + LABEL_HEIGHT);\r\n        const width = sequenceComponent.view.width + PADDING_X * 2;\r\n        const height = sequenceComponent.view.height + PADDING_TOP + LABEL_HEIGHT;\r\n        const joinX = sequenceComponent.view.joinX + PADDING_X;\r\n        LabelView.create(g, joinX, PADDING_TOP, step.name);\r\n        const iconUrl = configuration.iconUrlProvider ? configuration.iconUrlProvider(step.componentType, step.type) : null;\r\n        const inputView = InputView.createRectInput(g, joinX, 0, iconUrl);\r\n        JoinView.createStraightJoin(g, new Vector(joinX, 0), PADDING_TOP);\r\n        const regionView = RegionView.create(g, [width], height);\r\n        const validationErrorView = ValidationErrorView.create(g, width, 0);\r\n        return new ContainerStepComponentView(g, width, height, joinX, sequenceComponent, inputView, regionView, validationErrorView);\r\n    }\r\n    getClientPosition() {\r\n        return this.regionView.getClientPosition();\r\n    }\r\n    containsElement(element) {\r\n        return this.g.contains(element);\r\n    }\r\n    setIsDragging(isDragging) {\r\n        this.inputView.setIsHidden(isDragging);\r\n        this.sequenceComponent.setIsDragging(isDragging);\r\n    }\r\n    setIsSelected(isSelected) {\r\n        this.regionView.setIsSelected(isSelected);\r\n    }\r\n    setIsDisabled(isDisabled) {\r\n        Dom.toggleClass(this.g, isDisabled, 'sqd-disabled');\r\n    }\r\n    setIsValid(isHidden) {\r\n        this.validationErrorView.setIsHidden(isHidden);\r\n    }\r\n}\r\n","references":["/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/dom.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/core/vector.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/definition.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/designer-configuration.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/sequence/sequence-component.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/input-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/join-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/label-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/region-view.ts","/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/src/workspace/common-views/validation-error-view.ts"],"dts":{"name":"/Users/mm/Documents/IntelliProIntern/sequential-flow-chart-front-end/build/workspace/container-step/container-step-component-view.d.ts","writeByteOrderMark":false,"text":"import { Vector } from '../../core/vector';\r\nimport { ContainerStep } from '../../definition';\r\nimport { StepsConfiguration } from '../../designer-configuration';\r\nimport { ComponentView } from '../component';\r\nimport { SequenceComponent } from '../sequence/sequence-component';\r\nexport declare class ContainerStepComponentView implements ComponentView {\r\n    readonly g: SVGGElement;\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly joinX: number;\r\n    readonly sequenceComponent: SequenceComponent;\r\n    private readonly inputView;\r\n    private readonly regionView;\r\n    private readonly validationErrorView;\r\n    static create(parent: SVGElement, step: ContainerStep, configuration: StepsConfiguration): ContainerStepComponentView;\r\n    private constructor();\r\n    getClientPosition(): Vector;\r\n    containsElement(element: Element): boolean;\r\n    setIsDragging(isDragging: boolean): void;\r\n    setIsSelected(isSelected: boolean): void;\r\n    setIsDisabled(isDisabled: boolean): void;\r\n    setIsValid(isHidden: boolean): void;\r\n}\r\n"}}
